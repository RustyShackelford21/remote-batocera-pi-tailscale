#!/bin/bash
# Ultimate Batocera Tailscale & SSH Setup (Menu Version)
# Version: 14.7 - Enhanced Visual Interface, Hostname-based SSH keys, Auto-Detect IP
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
WHITE='\033[1;37m'
BOLD='\033[1m'
UNDERLINE='\033[4m'
NC='\033[0m'

log() {
    echo -e "${1}[$(date '+%Y-%m-%d %H:%M:%S')] ${2}${NC} ${MAGENTA}⚡${NC}"
}

INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="$INSTALL_DIR/keys"
DROPBEAR_KEY="$SSH_DIR/id_dropbear"
LOCAL_SSH_PORT="22"

# Enhanced banner function with ASCII art
banner() {
    local text="$1"
    local width=70
    local padding=$(( (width - ${#text}) / 2 ))
    local border=$(printf "%${width}s" | tr " " "=")
    
    echo -e "\n${BLUE}$border${NC}"
    echo -e "${BLUE}║${NC}${MAGENTA}$(printf "%${padding}s")${text}$(printf "%$(( width - padding - ${#text} - 2 ))s")${NC}${BLUE}║${NC}"
    echo -e "${BLUE}$border${NC}"
    
    # ASCII Art for Tailscale
    echo -e "${CYAN}"
    echo -e "    _____     _ __              __     "
    echo -e "   /_  _/_ __(_) /___  ___ ___/ /__   "
    echo -e "    / // // / / __/ _ \/ -_) _  / -_)  "
    echo -e "   /_/ \_,_/_/\__/\___/\__/\_,_/\__/   "
    echo -e "        ❯❯❯ BATOCERA EDITION ❮❮❮        "
    echo -e "${NC}\n"
}

# Section divider function
section_divider() {
    local text="$1"
    echo -e "\n${YELLOW}▓▓▓▓▓▓▓▓▓▓▓▓▓[ ${WHITE}${text}${YELLOW} ]▓▓▓▓▓▓▓▓▓▓▓▓▓${NC}\n"
}

# Info and warning box functions
info_box() {
    echo -e "${BLUE}┌─────────────────────────────────────────────────┐${NC}"
    echo -e "${BLUE}│${NC} ${CYAN}ℹ INFO:${NC} $1"
    echo -e "${BLUE}└─────────────────────────────────────────────────┘${NC}"
}

warning_box() {
    echo -e "${YELLOW}┌─────────────────────────────────────────────────┐${NC}"
    echo -e "${YELLOW}│${NC} ${RED}⚠ WARNING:${NC} $1"
    echo -e "${YELLOW}└─────────────────────────────────────────────────┘${NC}"
}

success_box() {
    echo -e "${GREEN}┌─────────────────────────────────────────────────┐${NC}"
    echo -e "${GREEN}│${NC} ${GREEN}✓ SUCCESS:${NC} $1"
    echo -e "${GREEN}└─────────────────────────────────────────────────┘${NC}"
}

progress_indicator() {
    local duration=$1
    local message="$2"
    local spin=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    local i=0
    echo -ne "${CYAN}${message}...${NC} "
    for ((t=0; t<duration*10; t++)); do
        printf "\b${spin[i]}"
        i=$(( (i+1) % 10 ))
        sleep 0.1
    done
    echo -e "\b${GREEN}✓${NC}"
}

# Ensure script is run as root
[ "$(id -u)" -ne 0 ] && { log "$RED" "ERROR: Run as root."; exit 1; }

clear
banner "Batocera Tailscale & SSH Setup (v14.7)"
echo -e "${CYAN}Setup Tailscale, SSH (password or key), Samba file sharing, subnet routing, and exit node.${NC}"

# Check internet connection
if ! ping -c 3 8.8.8.8 &>/dev/null; then
    warning_box "No internet connection detected. Connect to the internet and try again."
    exit 1
fi

# Check if curl is installed
if ! command -v curl &>/dev/null; then
    warning_box "curl is not installed. Please install it and rerun the script."
    exit 1
fi

section_divider "PREPARING ENVIRONMENT"

# Detect latest Tailscale version
log "$BLUE" "Detecting latest Tailscale stable version for arm64..."
progress_indicator 2 "Fetching version"
LATEST_VERSION=$(curl -s "https://pkgs.tailscale.com/stable/" | grep -oP 'tailscale_\K[0-9]+\.[0-9]+\.[0-9]+(?=_arm64\.tgz)' | sort -V | tail -n 1)
if [[ -z "$LATEST_VERSION" ]]; then
    warning_box "Could not fetch latest Tailscale version—falling back to 1.80.2."
    TAILSCALE_VERSION="1.80.2"
else
    TAILSCALE_VERSION="$LATEST_VERSION"
    info_box "Latest Tailscale version detected: $TAILSCALE_VERSION"
fi

section_divider "STEP 1: TAILSCALE SETUP"

# Prompt for Tailscale Auth Key
read -rp "Enter your Tailscale auth key (from https://login.tailscale.com/admin/settings/keys): " AUTH_KEY
[[ -z "$AUTH_KEY" ]] && { warning_box "Auth key required."; exit 1; }
[[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { warning_box "Invalid auth key format."; exit 1; }

# Set hostname
DEFAULT_HOSTNAME=$(hostname | cut -d'.' -f1)
read -rp "Enter hostname (default: $DEFAULT_HOSTNAME): " USER_HOSTNAME
HOSTNAME="${USER_HOSTNAME:-$DEFAULT_HOSTNAME}"
# Set the SSH key filenames based on hostname
OPENSSH_KEY="$KEYS_DIR/id_ed25519_${HOSTNAME}"
DEFAULT_TAG="tag:ssh-batocera"
echo -e "${CYAN}Use default Tailscale tag '$DEFAULT_TAG'?${NC}"
echo -e "${WHITE}1) Yes (recommended)${NC}"
echo -e "${WHITE}2) No (enter custom tag)${NC}"
read -rp "Select an option (1/2): " TAG_CHOICE
if [[ "$TAG_CHOICE" == "2" ]]; then
    read -rp "Enter custom tag: " TAG
    [[ -z "$TAG" ]] && { warning_box "Tag required."; exit 1; }
else
    TAG="$DEFAULT_TAG"
fi

section_divider "STEP 2: SSH AUTHENTICATION"

# SSH Authentication Mode Selection
if [ -f "$DROPBEAR_KEY" ]; then
    info_box "SSH key detected—key authentication recommended."
else
    info_box "No SSH key detected—will generate one if you choose key auth."
fi
echo -e "${CYAN}Choose your SSH authentication method:${NC}"
echo -e "${WHITE}1) Password (default: root/linux)${NC}"
echo -e "${WHITE}2) Key-based authentication (recommended for security)${NC}"
read -rp "Select an option (1/2): " SSH_CHOICE
[[ "$SSH_CHOICE" == "2" ]] && AUTH_MODE="key" || AUTH_MODE="password"

section_divider "STEP 3: SUBNET ROUTING"

# Subnet Routing Option
echo -e "${CYAN}Enable subnet routing to share your local network over Tailscale?${NC}"
echo -e "${WHITE}1) Yes (recommended for full remote access)${NC}"
echo -e "${WHITE}2) No (default)${NC}"
read -rp "Select an option (1/2): " SUBNET_CHOICE
if [[ "$SUBNET_CHOICE" == "1" ]]; then
    log "$BLUE" "Detecting network subnet..."
    progress_indicator 1
    GATEWAY_IP=$(ip route show default | awk '/default/ {print $3}')
    if [[ -z "$GATEWAY_IP" ]]; then
        warning_box "Could not detect subnet."
        read -rp "Enter your subnet (e.g., 192.168.50.0/24): " SUBNET
    else
        SUBNET=$(echo "$GATEWAY_IP" | awk -F. '{print $1"."$2"."$3".0/24"}')
        success_box "Detected subnet: $SUBNET"
        warning_box "Ensure no other device advertises this subnet in Tailscale."
        read -rp "Use this subnet ($SUBNET)? (yes/no): " CONFIRM_SUBNET
        [[ "$CONFIRM_SUBNET" != "yes" ]] && read -rp "Enter your subnet: " SUBNET
    fi
    [[ ! "$SUBNET" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]] && { warning_box "Invalid subnet format."; exit 1; }
    SUBNET_ENABLE="yes"
else
    SUBNET_ENABLE="no"
fi

section_divider "STEP 4: EXIT NODE"

# Exit Node Option
echo -e "${CYAN}Configure this device as a Tailscale exit node?${NC}"
echo -e "${YELLOW}This allows other Tailscale devices to route internet traffic through this device.${NC}"
echo -e "${WHITE}1) Yes (enable exit node)${NC}"
echo -e "${WHITE}2) No (default)${NC}"
read -rp "Select an option (1/2): " EXIT_NODE_CHOICE
if [[ "$EXIT_NODE_CHOICE" == "1" ]]; then
    EXIT_NODE_ENABLE="yes"
    success_box "Exit node will be enabled"
    warning_box "You'll need to authorize this exit node in the Tailscale admin console."
else
    EXIT_NODE_ENABLE="no"
fi

section_divider "NETWORK CONFIGURATION"

# Get Local IP
log "$BLUE" "Detecting local IP..."
LOCAL_IP=$(ip -4 addr show | grep -oE "inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | awk '{print $2}' | grep -v "127.0.0.1" | head -n 1)
if [[ -z "$LOCAL_IP" || ! "$LOCAL_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    warning_box "Could not detect valid local IP, attempting alternate methods..."
    LOCAL_IP=$(hostname -I | awk '{print $1}')
    if [[ -z "$LOCAL_IP" || ! "$LOCAL_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        warning_box "Could not detect valid local IP."
        read -rp "Please enter your device's local IP address: " LOCAL_IP
        if [[ -z "$LOCAL_IP" || ! "$LOCAL_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            warning_box "Invalid IP format. Exiting."
            exit 1
        fi
    fi
fi
success_box "Local IP: $LOCAL_IP"

section_divider "SSH CONFIGURATION"

# SSH Key Setup (if key mode)
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$BLUE" "Configuring SSH key authentication..."
    mkdir -p "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
    chmod 700 "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
    if [ ! -f "$DROPBEAR_KEY" ]; then
        log "$GREEN" "🔑 Generating SSH key..."
        progress_indicator 3 "Forging key"
        dropbearkey -t ed25519 -f "$DROPBEAR_KEY" || { warning_box "Key generation failed."; exit 1; }
        chmod 600 "$DROPBEAR_KEY"
        dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { warning_box "Public key extraction failed."; exit 1; }
        chmod 600 /etc/dropbear/authorized_keys
    fi
    dropbearconvert dropbear openssh "$DROPBEAR_KEY" "$OPENSSH_KEY" || { warning_box "Key conversion failed."; exit 1; }
    chmod 600 "$OPENSSH_KEY"
fi

# Dropbear Configuration
log "$BLUE" "Configuring Dropbear..."
touch /etc/dropbear/dropbear.conf
[[ ! -w /etc/dropbear/dropbear.conf ]] && { warning_box "Cannot write Dropbear config."; exit 1; }
sed -i '/^PasswordAuth/d' /etc/dropbear/dropbear.conf 2>/dev/null || true
if [[ "$AUTH_MODE" == "key" ]]; then
    echo "PasswordAuth yes" > /etc/dropbear/dropbear.conf
    warning_box "Password auth enabled until key is confirmed"
else
    echo "PasswordAuth yes" > /etc/dropbear/dropbear.conf
    success_box "Password authentication enabled"
fi

section_divider "SAMBA CONFIGURATION"

# Samba Configuration
log "$BLUE" "Configuring Samba for file sharing..."
mkdir -p /etc/samba
cat > /etc/samba/smb.conf <<EOF
[global]
workgroup = WORKGROUP
server string = Batocera Share
server min protocol = SMB2
vfs objects = fruit streams_xattr
fruit:locking = none
fruit:resource = file
fruit:metadata = stream
security = user
map to guest = Bad User
[share]
path = /userdata
writeable = yes
guest ok = yes
create mask = 0666
directory mask = 0777
force user = root
EOF
if ! pgrep -f "smbd" > /dev/null; then
    smbd -D -s /etc/samba/smb.conf || { warning_box "Samba start failed."; exit 1; }
else
    warning_box "Samba already running—skipping restart."
fi

section_divider "TAILSCALE INSTALLATION"

# Tailscale Installation
log "$BLUE" "Installing Tailscale $TAILSCALE_VERSION..."
progress_indicator 5 "Downloading Tailscale"
mkdir -p "$INSTALL_DIR/bin"
wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { warning_box "Download failed."; exit 1; }
tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 || { warning_box "Extraction failed."; exit 1; }
rm "$INSTALL_DIR/tailscale.tgz"
chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled"

log "$BLUE" "Starting Tailscale..."
progress_indicator 3 "Starting Tailscale"
pkill -f "tailscaled" || true
mkdir -p /var/run/tailscale
ln -sf "$INSTALL_DIR/tailscaled.sock" /var/run/tailscale/tailscaled.sock
"$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
sleep 10
TAILSCALE_ARGS="--authkey=$AUTH_KEY --hostname=$HOSTNAME --advertise-tags=$TAG --accept-routes"
[[ "$SUBNET_ENABLE" == "yes" ]] && TAILSCALE_ARGS="$TAILSCALE_ARGS --advertise-routes=$SUBNET"
[[ "$EXIT_NODE_ENABLE" == "yes" ]] && TAILSCALE_ARGS="$TAILSCALE_ARGS --advertise-exit-node"
"$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" up $TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1 || { warning_box "Tailscale failed:"; cat /tmp/tailscaled.log; exit 1; }
sleep 5

# Verify Tailscale is Running
if ! "$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" status &>/dev/null; then
    warning_box "Tailscale is not running. Check logs with 'cat /tmp/tailscaled.log'"
    exit 1
fi

# Get Tailscale IP
log "$BLUE" "Waiting for Tailscale IP..."
TRIES=0
TAILSCALE_IP=""
while [[ -z "$TAILSCALE_IP" && $TRIES -lt 10 ]]; do
    sleep 3
    TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null)
    ((TRIES++))
done
[[ -z "$TAILSCALE_IP" ]] && { warning_box "No Tailscale IP detected."; TAILSCALE_IP="$LOCAL_IP"; } || success_box "Tailscale IP: $TAILSCALE_IP"

section_divider "SSH KEY SETUP"

# SSH Key Download and Config (if key mode)
if [[ "$AUTH_MODE" == "key" ]]; then
    banner "SSH Key Download and Testing"
    echo -e "${CYAN}Download your SSH key and config—follow these steps:${NC}"
    log "$YELLOW" "1. Open a NEW terminal (PowerShell: Win + T, 'powershell'; Linux/macOS: any terminal):"
    log "$BLUE" "Starting Dropbear on 2222 (password mode)..."
    pkill -f "dropbear.*2222" || true
    /usr/sbin/dropbear -p 2222 || { warning_box "Dropbear failed on 2222."; exit 1; }
    sleep 5
    log "$YELLOW" "2. Download the SSH key—copy-paste this:"
    echo -e "${WHITE}scp -P 2222 root@$LOCAL_IP:$OPENSSH_KEY \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_${HOSTNAME}\"${NC}"
    log "$CYAN" "   - Windows: Auto-detects username."
    log "$CYAN" "   - Password: 'linux'."
    log "$CYAN" "   - Linux/macOS: scp -P 2222 root@$LOCAL_IP:$OPENSSH_KEY ~/.ssh/id_ed25519_${HOSTNAME}"
    log "$CYAN" "   - iOS: Termius: scp -P 2222 root@$LOCAL_IP:$OPENSSH_KEY <destination>"
    log "$YELLOW" "3. Fix key permissions (Windows only):"
    echo -e "${WHITE}icacls \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_${HOSTNAME}\" /inheritance:r /grant:r \"\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME'):F\"${NC}"
    log "$YELLOW" "4. Download SSH config—copy-paste this:"
    cat > /tmp/ssh_config_${HOSTNAME} <<EOF
Host ${HOSTNAME}-tailscale $TAILSCALE_IP
    HostName $TAILSCALE_IP
    User root
    IdentityFile ~/.ssh/id_ed25519_${HOSTNAME}
    StrictHostKeyChecking no
EOF
    chmod 600 /tmp/ssh_config_${HOSTNAME}
    echo -e "${WHITE}scp -P 2222 root@$LOCAL_IP:/tmp/ssh_config_${HOSTNAME} \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\config_${HOSTNAME}\"${NC}"
    log "$CYAN" "   - Linux/macOS: scp -P 2222 root@$LOCAL_IP:/tmp/ssh_config_${HOSTNAME} ~/.ssh/config_${HOSTNAME}"
    log "$CYAN" "   - iOS: In Termius, set key, IP ($TAILSCALE_IP), user (root)—no config needed."
    log "$YELLOW" "5. Append to existing SSH config (Windows):"
    log "$CYAN" "   - type \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\config_${HOSTNAME}\" >> \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\config\""
    log "$CYAN" "   - Linux/macOS: cat ~/.ssh/config_${HOSTNAME} >> ~/.ssh/config"
    log "$YELLOW" "6. Test SSH—copy-paste this:"
    echo -e "${WHITE}ssh -i \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_${HOSTNAME}\" root@$LOCAL_IP -p 2222${NC}"
    log "$CYAN" "   - Linux/macOS: ssh -i ~/.ssh/id_ed25519_${HOSTNAME} root@$LOCAL_IP -p 2222"
    log "$CYAN" "   - iOS: Termius, IP ($LOCAL_IP), port 2222."
    read -rp "Did SSH work on 2222? (yes/no): " KEY_WORKS
    if [[ "$KEY_WORKS" =~ ^[Yy]es$ ]]; then
        success_box "Key confirmed!"
        echo "PasswordAuth no" > /etc/dropbear/dropbear.conf
        log "$BLUE" "Locking to key auth on 22..."
        progress_indicator 2 "Locking SSH"
        if ! pgrep -f "dropbear.*-p 22" > /dev/null; then
            pkill -f "dropbear" || true
            sleep 1
            /usr/sbin/dropbear -s -p 22 || { warning_box "Dropbear failed!"; exit 1; }
            success_box "Dropbear restarted with key-only settings"
        else
            warning_box "Skipping Dropbear restart to avoid disconnecting you"
            info_box "Key-only mode will apply after reboot"
        fi
    else
        warning_box "Key failed—troubleshoot."
        pkill -f "dropbear.*2222" || true
        exit 1
    fi
    pkill -f "dropbear.*2222" || true  # Clean up 2222
fi

section_divider "FINAL VERIFICATION"

# Final SSH Test (Key Mode Only)
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$YELLOW" "Final test—confirm key-only SSH works before reboot:"
    echo -e "${WHITE}ssh ${HOSTNAME}-tailscale  # Or: ssh -i \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_${HOSTNAME}\" root@$LOCAL_IP${NC}"
    log "$CYAN" "   - Linux/macOS: ssh -i ~/.ssh/id_ed25519_${HOSTNAME} root@$LOCAL_IP"
    log "$CYAN" "   - iOS: Termius, IP ($LOCAL_IP), port 22."
    log "$CYAN" "   - NOTE: Ensure Tailscale is ENABLED for ${HOSTNAME}-tailscale. Pre-reboot, passwords might work if Dropbear wasn't restarted."
    read -rp "Did key-based SSH work (and password fail)? (yes/no): " SSH_WORKS
    [[ "$SSH_WORKS" =~ ^[Nn]o$ ]] && { warning_box "SSH failed—reboot canceled."; exit 1; }
fi

section_divider "PERSISTENCE SETUP"

# Persistence
log "$BLUE" "Setting persistence..."
progress_indicator 3 "Saving state"
cat > /userdata/system/custom.sh <<EOF
#!/bin/sh
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun
ip link set wlan0 up
iptables -F INPUT
iptables -P INPUT ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 445 -j ACCEPT
iptables -A INPUT -p udp --dport 137-139 -j ACCEPT
if ! pgrep -f "dropbear.*-p 22" > /dev/null; then
    pkill -f dropbear || true
    sleep 1
    /usr/sbin/dropbear -s -p 22 || echo "Dropbear failed" >> /tmp/custom.log
fi
mkdir -p /var/run/tailscale
ln -sf $INSTALL_DIR/tailscaled.sock /var/run/tailscale/tailscaled.sock
if ! pgrep -f "$INSTALL_DIR/bin/tailscaled" > /dev/null; then
    $INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
    sleep 10
    TAILSCALE_ARGS="--hostname=$HOSTNAME --advertise-tags=$TAG --accept-routes"
    [[ "$SUBNET_ENABLE" == "yes" ]] && TAILSCALE_ARGS="\$TAILSCALE_ARGS --advertise-routes=$SUBNET"
    [[ "$EXIT_NODE_ENABLE" == "yes" ]] && TAILSCALE_ARGS="\$TAILSCALE_ARGS --advertise-exit-node"
    [ -f "$INSTALL_DIR/tailscaled.state" ] && $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up \$TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1
fi
sleep 15
if ! pgrep -f "smbd" > /dev/null; then
    smbd -D -s /etc/samba/smb.conf || echo "Samba failed" >> /tmp/custom.log
fi
EOF
chmod +x /userdata/system/custom.sh
[ -f /userdata/system/custom.sh ] || { warning_box "custom.sh failed."; exit 1; }

log "$BLUE" "Saving overlay..."
batocera-save-overlay && success_box "Overlay saved." || { warning_box "Overlay failed."; exit 1; }

section_divider "INSTALLATION SUMMARY"

# Create a fancy summary table
echo -e "${BLUE}┌───────────────────────────────────────────────────────────────┐${NC}"
echo -e "${BLUE}│${NC} ${WHITE}${BOLD}SETUP SUMMARY${NC}                                                 ${BLUE}│${NC}"
echo -e "${BLUE}├───────────────────────────────────────────┬───────────────────┤${NC}"
echo -e "${BLUE}│${NC} ${CYAN}Tailscale Version${NC}                           │ ${WHITE}$TAILSCALE_VERSION${NC}        ${BLUE}│${NC}"
echo -e "${BLUE}│${NC} ${CYAN}Tailscale IP${NC}                                │ ${WHITE}$TAILSCALE_IP${NC} ${BLUE}│${NC}"
echo -e "${BLUE}│${NC} ${CYAN}SSH Authentication Mode${NC}                     │ ${WHITE}$AUTH_MODE${NC}        ${BLUE}│${NC}"
if [[ "$AUTH_MODE" == "key" ]]; then
echo -e "${BLUE}│${NC} ${CYAN}SSH Key${NC}                                    │ ${WHITE}id_ed25519_${HOSTNAME}${NC} ${BLUE}│${NC}"
fi
if [[ "$SUBNET_ENABLE" == "yes" ]]; then
echo -e "${BLUE}│${NC} ${CYAN}Subnet Routing${NC}                             │ ${WHITE}$SUBNET${NC} ${BLUE}│${NC}"
fi
if [[ "$EXIT_NODE_ENABLE" == "yes" ]]; then
echo -e "${BLUE}│${NC} ${CYAN}Exit Node${NC}                                  │ ${WHITE}Enabled${NC}         ${BLUE}│${NC}"
fi
echo -e "${BLUE}└───────────────────────────────────────────┴───────────────────┘${NC}"

read -rp "Ready to reboot? (yes/no): " REBOOT_CONFIRM
if [[ "$REBOOT_CONFIRM" != "yes" ]]; then
    warning_box "Reboot canceled—review settings manually."
    exit 1
fi

# Completion Message
banner "Setup Complete!"
success_box "Tailscale & SSH configured successfully!"

# Connection instructions
echo -e "${BLUE}┌───────────────────────────────────────────────────────────────┐${NC}"
echo -e "${BLUE}│${NC} ${WHITE}${BOLD}CONNECTION INFORMATION${NC}                                          ${BLUE}│${NC}"
echo -e "${BLUE}└───────────────────────────────────────────────────────────────┘${NC}"

if [[ "$AUTH_MODE" == "key" ]]; then
    echo -e "${YELLOW}▶ SSH:${NC} ${WHITE}ssh ${HOSTNAME}-tailscale${NC}"
    echo -e "${CYAN}   - Or: ${WHITE}ssh -i ~/.ssh/id_ed25519_${HOSTNAME} root@$TAILSCALE_IP${NC}"
else
    echo -e "${YELLOW}▶ SSH:${NC} ${WHITE}ssh root@$TAILSCALE_IP${NC}"
    echo -e "${CYAN}   - Password: ${WHITE}linux${NC}"
fi

echo -e "${YELLOW}▶ Samba access (read/write):${NC}"
echo -e "${CYAN}   - Local: ${WHITE}smb://$LOCAL_IP/share${NC}"
echo -e "${CYAN}   - Tailscale: ${WHITE}smb://$TAILSCALE_IP/share${NC}"

[[ "$SUBNET_ENABLE" == "yes" ]] && echo -e "\n${YELLOW}▶ ${WHITE}Subnet routing enabled${NC}: Approve ${WHITE}$SUBNET${NC} in Tailscale Admin."
[[ "$EXIT_NODE_ENABLE" == "yes" ]] && echo -e "${YELLOW}▶ ${WHITE}Exit node enabled${NC}: Approve in Tailscale Admin."

echo -e "\n${GREEN}${BOLD}Rebooting in 5 seconds...${NC}"
for i in {5..1}; do
    echo -ne "${GREEN}$i...${NC}"
    sleep 1
done
echo -e "\n${MAGENTA}Farewell, safe travels! 👋${NC}\n"

sync
# Force reboot with SSH cleanup
pkill -f "dropbear.*2222" || true  # Kill temporary Dropbear
kill -9 $PPID 2>/dev/null  # Kill parent SSH session
reboot -f || { warning_box "Reboot failed—trying fallback..."; reboot; }
