#!/bin/bash
# Ultimate Batocera Tailscale & SSH Setup (Menu Version)
# Version: 15.1 - Enhanced Exit Node Features, Speed Testing, ACL Instructions, and Exit Node Management
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

log() {
    echo -e "${1}[$(date '+%Y-%m-%d %H:%M:%S')] ${2}${NC} ${MAGENTA}⚡${NC}"
}

INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="$INSTALL_DIR/keys"
DROPBEAR_KEY="$SSH_DIR/id_dropbear"
OPENSSH_KEY="$KEYS_DIR/id_ed25519_batocera"
LOCAL_SSH_PORT="22"

banner() {
    local text="$1"
    local width=60
    local border=$(printf "%${width}s" '' | tr ' ' '=')
    echo -e "${BLUE}${border}${NC}"
    printf "${MAGENTA}%${width}s\n${NC}" "$text" | tr ' ' '.'
    echo -e "${BLUE}${border}${NC}"
}

progress_indicator() {
    local duration=$1
    local message="$2"
    local spin=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    local i=0
    echo -ne "${CYAN}${message}...${NC} "
    for ((t=0; t<duration*10; t++)); do
        printf "\b${spin[i]}"
        i=$(( (i+1) % 10 ))
        sleep 0.1
    done
    echo -e "\b${GREEN}✓${NC}"
}

# Internet speed test function
test_internet_speed() {
    log "$BLUE" "Testing internet connection speed..."
    progress_indicator 3 "Downloading test file"
    
    # Download a 10MB test file and measure speed in Mbps
    START_TIME=$(date +%s.%N)
    curl -s -o /dev/null https://speed.cloudflare.com/__down?bytes=10000000
    END_TIME=$(date +%s.%N)
    
    # Calculate download time and speed in Mbps
    DURATION=$(echo "$END_TIME - $START_TIME" | bc)
    SPEED_MBPS=$(echo "10 * 8 / $DURATION" | bc -l | xargs printf "%.2f")
    
    if (( $(echo "$SPEED_MBPS < 5" | bc -l) )); then
        log "$YELLOW" "⚠️ Warning: Your internet connection is slow (${SPEED_MBPS} Mbps)"
        log "$YELLOW" "Exit nodes perform best with speeds of at least 5 Mbps."
        log "$YELLOW" "Devices using this exit node will be limited to this speed."
        return 1
    else
        log "$GREEN" "✅ Internet speed: ${SPEED_MBPS} Mbps (good for exit node)"
        return 0
    fi
}

# Create exit node manager script
create_exitnode_manager() {
    mkdir -p "$INSTALL_DIR/tools"
    cat > "$INSTALL_DIR/tools/exitnode-manager.sh" <<EOF
#!/bin/bash
# Tailscale Exit Node Manager for Batocera

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

INSTALL_DIR="/userdata/system/tailscale"
TAILSCALE="\$INSTALL_DIR/bin/tailscale"
SOCKET="\$INSTALL_DIR/tailscaled.sock"

echo -e "\${BLUE}=====================================\${NC}"
echo -e "\${CYAN}   Tailscale Exit Node Manager   \${NC}"
echo -e "\${BLUE}=====================================\${NC}"

# Check if Tailscale is running
if ! pgrep -f "tailscaled" > /dev/null; then
    echo -e "\${RED}Error: Tailscale is not running.\${NC}"
    echo "Please restart Tailscale first."
    exit 1
fi

# Check current exit node status
CURRENT_STATUS=\$(\$TAILSCALE --socket=\$SOCKET status --json | grep -o '"ExitNodeOption":[^,]*' | cut -d':' -f2 | tr -d '"')
if [[ "\$CURRENT_STATUS" == "true" ]]; then
    echo -e "\${GREEN}Exit node is currently: ENABLED\${NC}"
else
    echo -e "\${YELLOW}Exit node is currently: DISABLED\${NC}"
fi

echo
echo "Select an option:"
echo "1) Enable exit node"
echo "2) Disable exit node"
echo "3) Check status"
echo "4) Exit"
read -rp "Enter your choice (1-4): " CHOICE

case \$CHOICE in
    1)
        echo -e "\${BLUE}Enabling exit node...\${NC}"
        echo 1 > /proc/sys/net/ipv4/ip_forward
        \$TAILSCALE --socket=\$SOCKET up --advertise-exit-node
        if [ \$? -eq 0 ]; then
            echo -e "\${GREEN}Exit node enabled successfully.\${NC}"
            echo -e "\${YELLOW}Remember to approve this in the Tailscale admin console.\${NC}"
            # Save setting for persistence
            sed -i 's/EXIT_NODE_ENABLE="no"/EXIT_NODE_ENABLE="yes"/' /userdata/system/custom.sh
            batocera-save-overlay
        else
            echo -e "\${RED}Failed to enable exit node.\${NC}"
        fi
        ;;
    2)
        echo -e "\${BLUE}Disabling exit node...\${NC}"
        \$TAILSCALE --socket=\$SOCKET up --exit-node=
        if [ \$? -eq 0 ]; then
            echo -e "\${GREEN}Exit node disabled successfully.\${NC}"
            # Save setting for persistence
            sed -i 's/EXIT_NODE_ENABLE="yes"/EXIT_NODE_ENABLE="no"/' /userdata/system/custom.sh
            batocera-save-overlay
        else
            echo -e "\${RED}Failed to disable exit node.\${NC}"
        fi
        ;;
    3)
        # Show detailed status
        echo -e "\${BLUE}Current Tailscale status:\${NC}"
        \$TAILSCALE --socket=\$SOCKET status
        ;;
    4)
        echo "Exiting..."
        exit 0
        ;;
    *)
        echo -e "\${RED}Invalid option. Please try again.\${NC}"
        ;;
esac
EOF
    chmod +x "$INSTALL_DIR/tools/exitnode-manager.sh"
    log "$GREEN" "✅ Exit node manager created: $INSTALL_DIR/tools/exitnode-manager.sh"
    
    # Create convenience symlink in /usr/local/bin
    mkdir -p /usr/local/bin
    ln -sf "$INSTALL_DIR/tools/exitnode-manager.sh" /usr/local/bin/exitnode-manager
    chmod +x /usr/local/bin/exitnode-manager
}

# Ensure script is run as root
[ "$(id -u)" -ne 0 ] && { log "$RED" "ERROR: Run as root."; exit 1; }

clear
banner "Batocera Tailscale & SSH Setup (v15.1)"
echo -e "${CYAN}Setup Tailscale, SSH (password or key), Samba file sharing, subnet routing, and exit node.${NC}"

# Check internet connection
if ! ping -c 3 8.8.8.8 &>/dev/null; then
    log "$RED" "ERROR: No internet connection detected. Connect to the internet and try again."
    exit 1
fi

# Check if curl is installed
if ! command -v curl &>/dev/null; then
    log "$RED" "ERROR: curl is not installed. Please install it and rerun the script."
    exit 1
fi

# Detect latest Tailscale version
log "$BLUE" "Detecting latest Tailscale stable version for arm64..."
progress_indicator 2 "Fetching version"
LATEST_VERSION=$(curl -s "https://pkgs.tailscale.com/stable/" | grep -oP 'tailscale_\K[0-9]+\.[0-9]+\.[0-9]+(?=_arm64\.tgz)' | sort -V | tail -n 1)
if [[ -z "$LATEST_VERSION" ]]; then
    log "$RED" "ERROR: Could not fetch latest Tailscale version—falling back to 1.80.2."
    TAILSCALE_VERSION="1.80.2"
else
    TAILSCALE_VERSION="$LATEST_VERSION"
    log "$GREEN" "✅ Latest version detected: $TAILSCALE_VERSION"
fi

# Prompt for Tailscale Auth Key
log "$YELLOW" "Step 1: Tailscale Setup"
read -rp "Enter your Tailscale auth key (from https://login.tailscale.com/admin/settings/keys): " AUTH_KEY
[[ -z "$AUTH_KEY" ]] && { log "$RED" "ERROR: Auth key required."; exit 1; }
[[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid auth key format."; exit 1; }

# Set hostname
DEFAULT_HOSTNAME=$(hostname | cut -d'.' -f1)
read -rp "Enter hostname (default: $DEFAULT_HOSTNAME): " USER_HOSTNAME
HOSTNAME="${USER_HOSTNAME:-$DEFAULT_HOSTNAME}"
DEFAULT_TAG="tag:ssh-batocera"
echo "Use default Tailscale tag '$DEFAULT_TAG'?"
echo "1) Yes (recommended)"
echo "2) No (enter custom tag)"
read -rp "Select an option (1/2): " TAG_CHOICE
if [[ "$TAG_CHOICE" == "2" ]]; then
    read -rp "Enter custom tag: " TAG
    [[ -z "$TAG" ]] && { log "$RED" "ERROR: Tag required."; exit 1; }
else
    TAG="$DEFAULT_TAG"
fi

# SSH Authentication Mode Selection
log "$YELLOW" "Step 2: SSH Authentication"
if [ -f "$DROPBEAR_KEY" ]; then
    log "$GREEN" "✅ SSH key detected—key authentication recommended."
else
    log "$YELLOW" "No SSH key detected—will generate one if you choose key auth."
fi
echo "Choose your SSH authentication method:"
echo "1) Password (default: root/linux)"
echo "2) Key-based authentication (recommended for security)"
read -rp "Select an option (1/2): " SSH_CHOICE
[[ "$SSH_CHOICE" == "2" ]] && AUTH_MODE="key" || AUTH_MODE="password"

# Subnet Routing Option
log "$YELLOW" "Step 3: Subnet Routing"
echo "Enable subnet routing to share your local network over Tailscale?"
echo "1) Yes (recommended for full remote access)"
echo "2) No (default)"
read -rp "Select an option (1/2): " SUBNET_CHOICE
if [[ "$SUBNET_CHOICE" == "1" ]]; then
    log "$BLUE" "Detecting network subnet..."
    progress_indicator 1
    GATEWAY_IP=$(ip route show default | awk '/default/ {print $3}')
    if [[ -z "$GATEWAY_IP" ]]; then
        log "$YELLOW" "WARNING: Could not detect subnet."
        read -rp "Enter your subnet (e.g., 192.168.50.0/24): " SUBNET
    else
        SUBNET=$(echo "$GATEWAY_IP" | awk -F. '{print $1"."$2"."$3".0/24"}')
        log "$GREEN" "✅ Detected subnet: $SUBNET"
        echo -e "${YELLOW}Note: Ensure no other device advertises this subnet in Tailscale.${NC}"
        read -rp "Use this subnet ($SUBNET)? (yes/no): " CONFIRM_SUBNET
        [[ "$CONFIRM_SUBNET" != "yes" ]] && read -rp "Enter your subnet: " SUBNET
    fi
    [[ ! "$SUBNET" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]] && { log "$RED" "Invalid subnet format."; exit 1; }
    SUBNET_ENABLE="yes"
else
    SUBNET_ENABLE="no"
fi

# Exit Node Option
log "$YELLOW" "Step 4: Exit Node Configuration"
echo "Configure this device as a Tailscale exit node?"
echo "This allows other Tailscale devices to route all internet traffic through this device."
echo "1) No (default)"
echo "2) Yes - For everyone in my network"
echo "3) Yes - Only for specific tagged devices"
read -rp "Select an option (1/2/3): " EXIT_NODE_CHOICE

if [[ "$EXIT_NODE_CHOICE" == "2" || "$EXIT_NODE_CHOICE" == "3" ]]; then
    # Test internet speed before proceeding
    test_internet_speed
    SPEED_OK=$?
    
    if [[ $SPEED_OK -eq 1 ]]; then
        read -rp "Continue with exit node setup despite slow speed? (yes/no): " CONTINUE_ANYWAY
        [[ "$CONTINUE_ANYWAY" != "yes" ]] && { 
            log "$YELLOW" "Exit node setup cancelled due to slow internet speed."
            EXIT_NODE_ENABLE="no"
            EXIT_NODE_MODE="none"
        }
    fi
    
    if [[ "$EXIT_NODE_ENABLE" != "no" ]]; then
        # Enable IP forwarding for exit node
        log "$BLUE" "Enabling IP forwarding for exit node..."
        echo 1 > /proc/sys/net/ipv4/ip_forward
        
        # Set exit node options based on choice
        EXIT_NODE_ENABLE="yes"
        
        if [[ "$EXIT_NODE_CHOICE" == "3" ]]; then
            EXIT_NODE_MODE="tagged"
            log "$BLUE" "Setting up tagged exit node..."
            log "$YELLOW" "You'll need to configure Tailscale ACLs to control which devices can use this exit node."
        else
            EXIT_NODE_MODE="everyone"
        fi
        
        # Create exit node manager script
        create_exitnode_manager
        
        # Inform user about Tailscale admin approval
        log "$YELLOW" "IMPORTANT: You must also enable exit nodes in your Tailscale admin console."
        log "$CYAN" "Visit https://login.tailscale.com/admin/acls and ensure exit nodes are allowed."
    fi
else
    EXIT_NODE_ENABLE="no"
    EXIT_NODE_MODE="none"
fi

# Get Local IP
LOCAL_IP=$(ip -4 addr show | grep -oE "inet [0-9]+\.[0-9]+\.[0-9]+" | awk '{print $2}' | grep -v "127.0.0.1" | head -n 1)
[[ -z "$LOCAL_IP" ]] && { log "$RED" "ERROR: Local IP not found."; LOCAL_IP="<LOCAL_IP>"; } || log "$BLUE" "Local IP: $LOCAL_IP"

# SSH Key Setup (if key mode)
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$BLUE" "Configuring SSH key authentication..."
    mkdir -p "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
    chmod 700 "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
    if [ ! -f "$DROPBEAR_KEY" ]; then
        log "$GREEN" "🔑 Generating SSH key..."
        progress_indicator 3 "Forging key"
        dropbearkey -t ed25519 -f "$DROPBEAR_KEY" || { log "$RED" "Key gen failed."; exit 1; }
        chmod 600 "$DROPBEAR_KEY"
        dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { log "$RED" "Pubkey failed."; exit 1; }
        chmod 600 /etc/dropbear/authorized_keys
    fi
    dropbearconvert dropbear openssh "$DROPBEAR_KEY" "$OPENSSH_KEY" || { log "$RED" "Key conversion failed."; exit 1; }
    chmod 600 "$OPENSSH_KEY"
fi

# Dropbear Configuration
log "$BLUE" "Configuring Dropbear..."
touch /etc/dropbear/dropbear.conf
[[ ! -w /etc/dropbear/dropbear.conf ]] && { log "$RED" "ERROR: Cannot write Dropbear config."; exit 1; }
sed -i '/^PasswordAuth/d' /etc/dropbear/dropbear.conf 2>/dev/null || true
if [[ "$AUTH_MODE" == "key" ]]; then
    echo "PasswordAuth no" > /etc/dropbear/dropbear.conf
else
    echo "PasswordAuth yes" > /etc/dropbear/dropbear.conf
fi

# Samba Configuration
log "$BLUE" "Configuring Samba for file sharing..."
mkdir -p /etc/samba
cat > /etc/samba/smb.conf <<EOF
[global]
workgroup = WORKGROUP
server string = Batocera Share
server min protocol = SMB2
vfs objects = fruit streams_xattr
fruit:locking = none
fruit:resource = file
fruit:metadata = stream
security = user
map to guest = Bad User
[share]
path = /userdata
writeable = yes
guest ok = yes
create mask = 0666
directory mask = 0777
force user = root
EOF
if ! pgrep -f "smbd" > /dev/null; then
    smbd -D -s /etc/samba/smb.conf || { log "$RED" "Samba start failed."; exit 1; }
else
    log "$YELLOW" "Samba already running—skipping restart."
fi

# Tailscale Installation
log "$BLUE" "Installing Tailscale $TAILSCALE_VERSION..."
progress_indicator 5 "Downloading Tailscale"
mkdir -p "$INSTALL_DIR/bin"
wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "$RED" "Download failed."; exit 1; }
tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 || { log "$RED" "Extraction failed."; exit 1; }
rm "$INSTALL_DIR/tailscale.tgz"
chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled"

log "$BLUE" "Starting Tailscale..."
progress_indicator 3 "Starting Tailscale"
pkill -f "tailscaled" || true
mkdir -p /var/run/tailscale
ln -sf "$INSTALL_DIR/tailscaled.sock" /var/run/tailscale/tailscaled.sock
"$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
sleep 10
TAILSCALE_ARGS="--authkey=$AUTH_KEY --hostname=$HOSTNAME --advertise-tags=$TAG --accept-routes"
[[ "$SUBNET_ENABLE" == "yes" ]] && TAILSCALE_ARGS="$TAILSCALE_ARGS --advertise-routes=$SUBNET"

# Add exit node configuration if enabled
if [[ "$EXIT_NODE_ENABLE" == "yes" ]]; then
    if [[ "$EXIT_NODE_MODE" == "tagged" ]]; then
        # Fix: Use a separate parameter for the tag-specific exit node flag
        TAILSCALE_ARGS="$TAILSCALE_ARGS --advertise-exit-node"
    else
        TAILSCALE_ARGS="$TAILSCALE_ARGS --advertise-exit-node"
    fi
fi

"$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" up $TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1 || { log "$RED" "Tailscale failed:"; cat /tmp/tailscaled.log; exit 1; }
sleep 5

# Verify Tailscale is Running
if ! "$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" status &>/dev/null; then
    log "$RED" "ERROR: Tailscale is not running. Check logs with 'cat /tmp/tailscaled.log'"
    exit 1
fi

# Get Tailscale IP
log "$BLUE" "Waiting for Tailscale IP..."
TRIES=0
TAILSCALE_IP=""
while [[ -z "$TAILSCALE_IP" && $TRIES -lt 10 ]]; do
    sleep 3
    TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null)
    ((TRIES++))
done
[[ -z "$TAILSCALE_IP" ]] && { log "$YELLOW" "⚠️ No Tailscale IP."; TAILSCALE_IP="$LOCAL_IP"; } || log "$GREEN" "✅ Tailscale IP: $TAILSCALE_IP"

# SSH Key Download and Config (if key mode)
if [[ "$AUTH_MODE" == "key" ]]; then
    banner "SSH Key Download and Testing"
    echo -e "${CYAN}Download your SSH key and config—follow these steps:${NC}"
    log "$YELLOW" "1. Open a NEW terminal (PowerShell: Win + T, 'powershell'; Linux/macOS: any terminal):"
    log "$BLUE" "Starting Dropbear on 2222 (password mode)..."
    pkill -f "dropbear.*2222" || true
    /usr/sbin/dropbear -p 2222 || { log "$RED" "Dropbear failed on 2222."; exit 1; }
    sleep 5
    log "$YELLOW" "2. Download the SSH key—copy-paste this:"
    echo "scp -P 2222 root@$LOCAL_IP:/userdata/system/tailscale/keys/id_ed25519_batocera \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_batocera\""
    log "$CYAN" "   - Windows: Auto-detects username."
    log "$CYAN" "   - Password: 'linux'."
    log "$CYAN" "   - Linux/macOS: scp -P 2222 root@$LOCAL_IP:/userdata/system/tailscale/keys/id_ed25519_batocera ~/.ssh/id_ed25519_batocera"
    log "$CYAN" "   - iOS: Termius: scp -P 2222 root@$LOCAL_IP:/userdata/system/tailscale/keys/id_ed25519_batocera <destination>"
    log "$YELLOW" "3. Fix key permissions (Windows only):"
    echo "icacls \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_batocera\" /inheritance:r /grant:r \"\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME'):F\""
    log "$YELLOW" "4. Download SSH config—copy-paste this:"
    cat > /tmp/ssh_config <<EOF
Host batocera-tailscale $TAILSCALE_IP
    HostName $TAILSCALE_IP
    User root
    IdentityFile ~/.ssh/id_ed25519_batocera
    StrictHostKeyChecking no
EOF
    chmod 600 /tmp/ssh_config
    echo "scp -P 2222 root@$LOCAL_IP:/tmp/ssh_config \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\config\""
    log "$CYAN" "   - Linux/macOS: scp -P 2222 root@$LOCAL_IP:/tmp/ssh_config ~/.ssh/config"
    log "$CYAN" "   - iOS: In Termius, set key, IP ($TAILSCALE_IP), user (root)—no config needed."
    log "$CYAN" "   - After downloading, use 'ssh batocera-tailscale'."
    log "$YELLOW" "5. Test SSH—copy-paste this:"
    echo "ssh -i \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_batocera\" root@$LOCAL_IP -p 2222"
    log "$CYAN" "   - Linux/macOS: ssh -i ~/.ssh/id_ed25519_batocera root@$LOCAL_IP -p 2222"
    log "$CYAN" "   - iOS: Termius, IP ($LOCAL_IP), port 2222."
    read -rp "Did SSH work on 2222? (yes/no): " KEY_WORKS
    if [[ "$KEY_WORKS" =~ ^[Yy]es$ ]]; then
        log "$GREEN" "✅ Key confirmed!"
    else
        log "$RED" "❌ Key failed—troubleshoot."
        pkill -f "dropbear.*2222" || true
        exit 1
    fi
fi

# Final SSH Test (Key Mode Only)
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$YELLOW" "Final test—confirm SSH works before reboot:"
    echo "ssh batocera-tailscale  # Or: ssh -i \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_batocera\" root@$LOCAL_IP"
    log "$CYAN" "   - Linux/macOS: ssh -i ~/.ssh/id_ed25519_batocera root@$LOCAL_IP"
    log "$CYAN" "   - iOS: Termius, IP ($LOCAL_IP), port 22."
    log "$CYAN" "   - NOTE: Ensure Tailscale is ENABLED on your PC for this test (unlike local IP tests where it's off)."
    read -rp "Did SSH work? (yes/no): " SSH_WORKS
    [[ "$SSH_WORKS" =~ ^[Nn]o$ ]] && { log "$RED" "❌ SSH failed—reboot canceled."; exit 1; }
fi

# Persistence
log "$BLUE" "Setting persistence..."
progress_indicator 3 "Saving state"
cat > /userdata/system/custom.sh <<EOF
#!/bin/sh
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun
ip link set wlan0 up
iptables -F INPUT
iptables -P INPUT ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 445 -j ACCEPT
iptables -A INPUT -p udp --dport 137-139 -j ACCEPT

# Enable IP forwarding (for exit node)
if [[ "$EXIT_NODE_ENABLE" == "yes" ]]; then
    echo 1 > /proc/sys/net/ipv4/ip_forward
fi

if ! pgrep -f "dropbear.*-p 22" > /dev/null; then
    pkill -f dropbear || true
    sleep 1
    /usr/sbin/dropbear -s -p 22 || echo "Dropbear failed" >> /tmp/custom.log
fi
mkdir -p /var/run/tailscale
ln -sf $INSTALL_DIR/tailscaled.sock /var/run/tailscale/tailscaled.sock
if ! pgrep -f "$INSTALL_DIR/bin/tailscaled" > /dev/null; then
    $INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
    sleep 10
    TAILSCALE_ARGS="--hostname=$HOSTNAME --advertise-tags=$TAG --accept-routes"
    [[ "$SUBNET_ENABLE" == "yes" ]] && TAILSCALE_ARGS="\$TAILSCALE_ARGS --advertise-routes=$SUBNET"
    
    # Add exit node configuration if enabled
    if [[ "$EXIT_NODE_ENABLE" == "yes" ]]; then
        TAILSCALE_ARGS="\$TAILSCALE_ARGS --advertise-exit-node"
    fi
    
    [ -f "$INSTALL_DIR/tailscaled.state" ] && $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up \$TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1
fi
sleep 15
if ! pgrep -f "smbd" > /dev/null; then
    smbd -D -s /etc/samba/smb.conf || echo "Samba failed" >> /tmp/custom.log
fi
EOF
chmod +x /userdata/system/custom.sh
[ -f /userdata/system/custom.sh ] || { log "$RED" "ERROR: custom.sh failed."; exit 1; }

log "$BLUE" "Saving overlay..."
batocera-save-overlay && log "$GREEN" "✅ Overlay saved." || { log "$RED" "Overlay failed."; exit 1; }

# Final Confirmation Before Reboot
log "$YELLOW" "Setup complete! Review settings before reboot:"
echo -e "${CYAN}Tailscale Version: $TAILSCALE_VERSION${NC}"
echo -e "${CYAN}Tailscale IP: $TAILSCALE_IP${NC}"
echo -e "${CYAN}SSH Authentication Mode: $AUTH_MODE${NC}"
[[ "$SUBNET_ENABLE" == "yes" ]] && echo -e "${CYAN}Subnet Routing: $SUBNET${NC}"
if [[ "$EXIT_NODE_ENABLE" == "yes" ]]; then
    echo -e "${CYAN}Exit Node Enabled: Yes (Mode: ${EXIT_NODE_MODE})${NC}"
fi
read -rp "Ready to reboot? (yes/no): " REBOOT_CONFIRM
if [[ "$REBOOT_CONFIRM" != "yes" ]]; then
    log "$RED" "Reboot canceled—review settings manually."
    exit 1
fi

# Completion Message
banner "Setup Complete!"
log "$GREEN" "
# Completion Message
banner "Setup Complete!"
log "$GREEN" "✅ Tailscale & SSH configured!"
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$YELLOW" "SSH: ssh batocera-tailscale"
    log "$CYAN" "   - Or: ssh -i ~/.ssh/id_ed25519_batocera root@$TAILSCALE_IP"
else
    log "$YELLOW" "SSH: ssh root@$TAILSCALE_IP"
    log "$CYAN" "   - Password: linux"
fi
log "$YELLOW" "Samba access (read/write):"
log "$CYAN" "   - Local: smb://$LOCAL_IP/share"
log "$CYAN" "   - Tailscale: smb://$TAILSCALE_IP/share"
[[ "$SUBNET_ENABLE" == "yes" ]] && log "$YELLOW" "Subnet routing enabled: Approve $SUBNET in Tailscale Admin."

# Exit Node Instructions
if [[ "$EXIT_NODE_ENABLE" == "yes" ]]; then
    log "$YELLOW" "Exit Node enabled! To use it:"
    log "$CYAN" "   1. Approve this device as an exit node in Tailscale admin"
    log "$CYAN" "   2. On client devices:"
    log "$CYAN" "      - Windows/Mac/Linux: tailscale up --exit-node=$TAILSCALE_IP"
    log "$CYAN" "      - Android/iOS: Settings → Use Exit Node → Select $HOSTNAME"
    log "$YELLOW" "Exit Node Management:"
    log "$CYAN" "   - To enable/disable the exit node later, run: exitnode-manager"
    
    # If tagged mode, provide ACL instructions
    if [[ "$EXIT_NODE_MODE" == "tagged" ]]; then
        banner "Tagged Exit Node ACL Configuration"
        log "$YELLOW" "You selected a tagged exit node. To configure access permissions:"
        log "$CYAN" "1. Visit https://login.tailscale.com/admin/acls"
        log "$CYAN" "2. Edit your policy file to include rules like this:"
        echo -e "${GREEN}{"
        echo "  \"tagOwners\": {"
        echo "    \"tag:$TAG\": [\"your-user@example.com\"]"
        echo "  },"
        echo "  \"acls\": ["
        echo "    // Allow devices with this tag to use this exit node"
        echo "    {\"action\": \"accept\", \"src\": [\"tag:client-devices\"], \"dst\": [\"tag:$TAG:*\"]}"
        echo "  ],"
        echo "  \"exitNodes\": ["
        echo "    // These users or tags can use exit nodes"
        echo "    \"tag:client-devices\""
        echo "  ],"
        echo "  \"exitNodeIP\": ["
        echo "    // These users or tags can be exit nodes"
        echo "    \"tag:$TAG\""
        echo "  ]"
        echo -e "}${NC}"
        log "$YELLOW" "Replace 'your-user@example.com' with your Tailscale account email"
        log "$YELLOW" "Replace 'tag:client-devices' with the tag assigned to client devices"
    fi
fi

# Display any final exit node instructions before reboot
if [[ "$EXIT_NODE_ENABLE" == "yes" ]]; then
    log "$BLUE" "TIP: Run internet speed tests at both ends to verify exit node performance."
    log "$BLUE" "     Exit nodes work best with consistent, fast connections."
fi

log "$GREEN" "Rebooting in 5..."
sleep 5
sync
# Force reboot with SSH cleanup
pkill -f "dropbear.*2222" || true  # Kill temporary Dropbear
kill -9 $PPID 2>/dev/null  # Kill parent SSH session
reboot -f || { log "$RED" "Reboot failed—trying fallback..."; reboot; }
