#!/bin/bash
# Ultimate Batocera Tailscale & SSH Setup (Menu Version)
# Version: 14.6 - Improved SSH Key Handling and Config Setup
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

log() {
    echo -e "${1}[$(date '+%Y-%m-%d %H:%M:%S')] ${2}${NC} ${MAGENTA}‚ö°${NC}"
}

INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="$INSTALL_DIR/keys"
DROPBEAR_KEY="$SSH_DIR/id_dropbear"
OPENSSH_KEY="$KEYS_DIR/id_ed25519_batocera"
LOCAL_SSH_PORT="22"

banner() {
    local text="$1"
    local width=60
    local border=$(printf "%${width}s" '' | tr ' ' '=')
    echo -e "${BLUE}${border}${NC}"
    printf "${MAGENTA}%${width}s\n${NC}" "$text" | tr ' ' '.'
    echo -e "${BLUE}${border}${NC}"
}

progress_indicator() {
    local duration=$1
    local message="$2"
    local spin=('‚†ã' '‚†ô' '‚†π' '‚†∏' '‚†º' '‚†¥' '‚†¶' '‚†ß' '‚†á' '‚†è')
    local i=0
    echo -ne "${CYAN}${message}...${NC} "
    for ((t=0; t<duration*10; t++)); do
        printf "\b${spin[i]}"
        i=$(( (i+1) % 10 ))
        sleep 0.1
    done
    echo -e "\b${GREEN}‚úì${NC}"
}

# Ensure script is run as root
[ "$(id -u)" -ne 0 ] && { log "$RED" "ERROR: Run as root."; exit 1; }

clear
banner "Batocera Tailscale & SSH Setup (v14.6)"
echo -e "${CYAN}Setup Tailscale, SSH (password or key), Samba, subnet routing, and optional exit node.${NC}"

# Check internet connection
if ! ping -c 3 8.8.8.8 &>/dev/null; then
    log "$RED" "ERROR: No internet connection detected. Connect to the internet and try again."
    exit 1
fi

# Check if curl is installed
if ! command -v curl &>/dev/null; then
    log "$RED" "ERROR: curl is not installed. Please install it and rerun the script."
    exit 1
fi

# Detect latest Tailscale version
log "$BLUE" "Detecting latest Tailscale stable version for arm64..."
progress_indicator 2 "Fetching version"
LATEST_VERSION=$(curl -s "https://pkgs.tailscale.com/stable/" | grep -oP 'tailscale_\K[0-9]+\.[0-9]+\.[0-9]+(?=_arm64\.tgz)' | sort -V | tail -n 1)
if [[ -z "$LATEST_VERSION" ]]; then
    log "$RED" "ERROR: Could not fetch latest Tailscale version‚Äîfalling back to 1.80.2."
    TAILSCALE_VERSION="1.80.2"
else
    TAILSCALE_VERSION="$LATEST_VERSION"
    log "$GREEN" "‚úÖ Latest version detected: $TAILSCALE_VERSION"
fi

# Prompt for Tailscale Auth Key
log "$YELLOW" "Step 1: Tailscale Setup"
read -rp "Enter your Tailscale auth key (from https://login.tailscale.com/admin/settings/keys): " AUTH_KEY
[[ -z "$AUTH_KEY" ]] && { log "$RED" "ERROR: Auth key required."; exit 1; }
[[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid auth key format."; exit 1; }

# Set hostname
DEFAULT_HOSTNAME=$(hostname | cut -d'.' -f1)
read -rp "Enter hostname (default: $DEFAULT_HOSTNAME): " USER_HOSTNAME
HOSTNAME="${USER_HOSTNAME:-$DEFAULT_HOSTNAME}"
DEFAULT_TAG="tag:ssh-batocera"
echo "Use default Tailscale tag '$DEFAULT_TAG'?"
echo "1) Yes (recommended)"
echo "2) No (enter custom tag)"
read -rp "Select an option (1/2): " TAG_CHOICE
if [[ "$TAG_CHOICE" == "2" ]]; then
    read -rp "Enter custom tag: " TAG
    [[ -z "$TAG" ]] && { log "$RED" "ERROR: Tag required."; exit 1; }
else
    TAG="$DEFAULT_TAG"
fi

# SSH Authentication Mode Selection
log "$YELLOW" "Step 2: SSH Authentication"
if [ -f "$DROPBEAR_KEY" ]; then
    log "$GREEN" "‚úÖ SSH key detected‚Äîkey authentication recommended."
else
    log "$YELLOW" "No SSH key detected‚Äîwill generate one if you choose key auth."
fi
echo "Choose your SSH authentication method:"
echo "1) Password (default: root/linux)"
echo "2) Key-based authentication (recommended for security)"
read -rp "Select an option (1/2): " SSH_CHOICE
[[ "$SSH_CHOICE" == "2" ]] && AUTH_MODE="key" || AUTH_MODE="password"

# Subnet Routing Option
log "$YELLOW" "Step 3: Subnet Routing"
echo "Enable subnet routing to share your local network over Tailscale?"
echo "1) Yes (recommended for full remote access)"
echo "2) No (default)"
read -rp "Select an option (1/2): " SUBNET_CHOICE
if [[ "$SUBNET_CHOICE" == "1" ]]; then
    log "$BLUE" "Detecting network subnet..."
    progress_indicator 1
    GATEWAY_IP=$(ip route show default | awk '/default/ {print $3}')
    if [[ -z "$GATEWAY_IP" ]]; then
        log "$YELLOW" "WARNING: Could not detect subnet."
        read -rp "Enter your subnet (e.g., 192.168.50.0/24): " SUBNET
    else
        SUBNET=$(echo "$GATEWAY_IP" | awk -F. '{print $1"."$2"."$3".0/24"}')
        log "$GREEN" "‚úÖ Detected subnet: $SUBNET"
        echo -e "${YELLOW}Note: Ensure no other device advertises this subnet in Tailscale.${NC}"
        read -rp "Use this subnet ($SUBNET)? (yes/no): " CONFIRM_SUBNET
        [[ "$CONFIRM_SUBNET" != "yes" ]] && read -rp "Enter your subnet: " SUBNET
    fi
    [[ ! "$SUBNET" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]] && { log "$RED" "Invalid subnet format."; exit 1; }
    SUBNET_ENABLE="yes"
else
    SUBNET_ENABLE="no"
fi

# Exit Node Option
log "$YELLOW" "Step 4: Exit Node"
echo "Advertise this device as an exit node (routes all Tailnet traffic through it)?"
echo "1) Yes"
echo "2) No (default)"
read -rp "Select an option (1/2): " EXITNODE_CHOICE
if [[ "$EXITNODE_CHOICE" == "1" ]]; then
    EXITNODE_ENABLE="yes"
    log "$GREEN" "‚úÖ Exit node enabled‚Äîapprove in Tailscale Admin if needed."
else
    EXITNODE_ENABLE="no"
fi

# Get Local IP
LOCAL_IP=$(ip -4 addr show | grep -oE "inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | awk '{print $2}' | grep -v "127.0.0.1" | head -n 1)
[[ -z "$LOCAL_IP" ]] && { log "$RED" "ERROR: Local IP not found."; LOCAL_IP="<LOCAL_IP>"; } || log "$BLUE" "Local IP: $LOCAL_IP"

# SSH Key Setup (if key mode)
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$BLUE" "Configuring SSH key authentication..."
    mkdir -p "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
    chmod 700 "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
    if [ ! -f "$DROPBEAR_KEY" ]; then
        log "$GREEN" "üîë Generating SSH key..."
        progress_indicator 3 "Forging key"
        dropbearkey -t ed25519 -f "$DROPBEAR_KEY" || { log "$RED" "Key gen failed."; exit 1; }
        chmod 600 "$DROPBEAR_KEY"
        dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { log "$RED" "Pubkey failed."; exit 1; }
        chmod 600 /etc/dropbear/authorized_keys
    fi
    dropbearconvert dropbear openssh "$DROPBEAR_KEY" "$OPENSSH_KEY" || { log "$RED" "Key conversion failed."; exit 1; }
    chmod 600 "$OPENSSH_KEY"
fi

# Dropbear Configuration
log "$BLUE" "Configuring Dropbear..."
touch /etc/dropbear/dropbear.conf
[[ ! -w /etc/dropbear/dropbear.conf ]] && { log "$RED" "ERROR: Cannot write Dropbear config."; exit 1; }
sed -i '/^PasswordAuth/d' /etc/dropbear/dropbear.conf 2>/dev/null || true
if [[ "$AUTH_MODE" == "key" ]]; then
    echo "PasswordAuth no" > /etc/dropbear/dropbear.conf
else
    echo "PasswordAuth yes" > /etc/dropbear/dropbear.conf
fi

# Samba Configuration
log "$BLUE" "Configuring Samba for file sharing..."
mkdir -p /etc/samba
cat > /etc/samba/smb.conf <<EOF
[global]
workgroup = WORKGROUP
server string = Batocera Share
server min protocol = SMB2
vfs objects = fruit streams_xattr
fruit:locking = none
fruit:resource = file
fruit:metadata = stream
security = user
map to guest = Bad User
[share]
path = /userdata
writeable = yes
guest ok = yes
create mask = 0666
directory mask = 0777
force user = root
EOF
if ! pgrep -f "smbd" > /dev/null; then
    smbd -D -s /etc/samba/smb.conf || { log "$RED" "Samba start failed."; exit 1; }
else
    log "$YELLOW" "Samba already running‚Äîskipping restart."
fi

# Tailscale Installation
log "$BLUE" "Installing Tailscale $TAILSCALE_VERSION..."
progress_indicator 5 "Downloading Tailscale"
mkdir -p "$INSTALL_DIR/bin"
wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "$RED" "Download failed."; exit 1; }
tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 || { log "$RED" "Extraction failed."; exit 1; }
rm "$INSTALL_DIR/tailscale.tgz"
chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled"

log "$BLUE" "Starting Tailscale..."
progress_indicator 3 "Starting Tailscale"
pkill -f "tailscaled" || true
mkdir -p /var/run/tailscale
ln -sf "$INSTALL_DIR/tailscaled.sock" /var/run/tailscale/tailscaled.sock
"$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
sleep 10
TAILSCALE_ARGS="--authkey=$AUTH_KEY --hostname=$HOSTNAME --advertise-tags=$TAG --accept-routes"
[[ "$SUBNET_ENABLE" == "yes" ]] && TAILSCALE_ARGS="$TAILSCALE_ARGS --advertise-routes=$SUBNET"
[[ "$EXITNODE_ENABLE" == "yes" ]] && TAILSCALE_ARGS="$TAILSCALE_ARGS --advertise-exit-node"
"$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" up $TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1 || { log "$RED" "Tailscale failed:"; cat /tmp/tailscaled.log; exit 1; }
sleep 5

# Verify Tailscale is Running
if ! "$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" status &>/dev/null; then
    log "$RED" "ERROR: Tailscale is not running. Check logs with 'cat /tmp/tailscaled.log'"
    exit 1
fi

# Get Tailscale IP
log "$BLUE" "Waiting for Tailscale IP..."
TRIES=0
TAILSCALE_IP=""
while [[ -z "$TAILSCALE_IP" && $TRIES -lt 10 ]]; do
    sleep 3
    TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null)
    ((TRIES++))
done
[[ -z "$TAILSCALE_IP" ]] && { log "$YELLOW" "‚ö†Ô∏è No Tailscale IP."; TAILSCALE_IP="$LOCAL_IP"; } || log "$GREEN" "‚úÖ Tailscale IP: $TAILSCALE_IP"

# SSH Key Download and Config (if key mode)
if [[ "$AUTH_MODE" == "key" ]]; then
    banner "SSH Key Download and Setup"
    echo -e "${CYAN}We‚Äôll set up your SSH key and config file for easy access.${NC}"
    log "$YELLOW" "Step 1: Start a temporary server to download files..."
    log "$BLUE" "Starting a simple HTTP server on port 8080 (uses local IP: $LOCAL_IP)..."
    python3 -m http.server 8080 --directory "$KEYS_DIR" & SERVER_PID=$!
    sleep 2

    log "$YELLOW" "Step 2: Download the SSH key to your local machine..."
    log "$CYAN" "Open a NEW terminal on your computer (not this one):"
    log "$CYAN" "  - Windows: Press Win + T, type 'powershell', hit Enter."
    log "$CYAN" "  - Linux/macOS: Open your terminal app."
    log "$CYAN" "Run this command to download the key (it will save to your current directory):"
    echo "curl -O http://$LOCAL_IP:8080/id_ed25519_batocera"
    log "$CYAN" "The key will be saved as 'id_ed25519_batocera' in your terminal‚Äôs current folder."

    log "$YELLOW" "Step 3: Move the key to the right place..."
    log "$CYAN" "Move the key to your SSH folder (create it if it doesn‚Äôt exist):"
    log "$CYAN" "  - Windows: In PowerShell, run:"
    echo "mkdir -Force ~\\.ssh; Move-Item -Path .\\id_ed25519_batocera -Destination ~\\.ssh\\id_ed25519_batocera_${HOSTNAME}"
    log "$CYAN" "  - Linux/macOS: In your terminal, run:"
    echo "mkdir -p ~/.ssh; mv ./id_ed25519_batocera ~/.ssh/id_ed25519_batocera_${HOSTNAME}"
    log "$CYAN" "This saves the key as 'id_ed25519_batocera_${HOSTNAME}' in your SSH folder."

    log "$YELLOW" "Step 4: Download the SSH config file..."
    log "$CYAN" "Run this command in your new terminal to download the config:"
    cat > "$KEYS_DIR/ssh_config" <<EOF
Host ${HOSTNAME}-local
    HostName $LOCAL_IP
    User root
    IdentityFile ~/.ssh/id_ed25519_batocera_${HOSTNAME}
    StrictHostKeyChecking no

Host ${HOSTNAME}-tailscale
    HostName $TAILSCALE_IP
    User root
    IdentityFile ~/.ssh/id_ed25519_batocera_${HOSTNAME}
    StrictHostKeyChecking no

Host $HOSTNAME
    HostName $HOSTNAME
    User root
    IdentityFile ~/.ssh/id_ed25519_batocera_${HOSTNAME}
    StrictHostKeyChecking no
EOF
    chmod 644 "$KEYS_DIR/ssh_config"
    echo "curl -O http://$LOCAL_IP:8080/ssh_config"
    log "$CYAN" "This saves 'ssh_config' in your current folder."

    log "$YELLOW" "Step 5: Set up the SSH config file..."
    log "$CYAN" "Move the config to your SSH folder and append it if needed:"
    log "$CYAN" "  - Windows (PowerShell):"
    echo "if (Test-Path ~\\.ssh\\config) { Add-Content ~\\.ssh\\config (Get-Content .\\ssh_config) } else { Move-Item .\\ssh_config ~\\.ssh\\config }"
    log "$CYAN" "  - Linux/macOS:"
    echo "cat ./ssh_config >> ~/.ssh/config || mv ./ssh_config ~/.ssh/config"
    log "$CYAN" "This adds the new settings to your existing config file (or creates it if none exists)."

    log "$YELLOW" "Step 6: Test your SSH connection..."
    log "$CYAN" "Try these commands in your new terminal to connect:"
    log "$GREEN" "  - Local IP: ssh ${HOSTNAME}-local"
    log "$GREEN" "  - Tailscale IP: ssh ${HOSTNAME}-tailscale"
    log "$GREEN" "  - Hostname: ssh $HOSTNAME"
    log "$CYAN" "Note: For Tailscale IP, ensure Tailscale is running on your computer."
    read -rp "Did at least one SSH command work? (yes/no): " SSH_TEST
    if [[ "$SSH_TEST" =~ ^[Yy]es$ ]]; then
        log "$GREEN" "‚úÖ SSH setup confirmed!"
    else
        log "$RED" "‚ùå SSH failed‚Äîcheck your key and config setup, then try again."
        kill $SERVER_PID 2>/dev/null
        exit 1
    fi

    log "$BLUE" "Stopping temporary server..."
    kill $SERVER_PID 2>/dev/null
fi

# Final SSH Test (Key Mode Only)
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$YELLOW" "Final test before reboot‚Äîconfirm SSH works with aliases:"
    log "$GREEN" "  ssh ${HOSTNAME}-local  # Local IP"
    log "$GREEN" "  ssh ${HOSTNAME}-tailscale  # Tailscale IP"
    log "$GREEN" "  ssh $HOSTNAME  # Hostname"
    log "$CYAN" "Run one of these in your new terminal."
    read -rp "Did SSH work with an alias? (yes/no): " SSH_WORKS
    [[ "$SSH_WORKS" =~ ^[Nn]o$ ]] && { log "$RED" "‚ùå SSH failed‚Äîreboot canceled."; exit 1; }
fi

# Persistence
log "$BLUE" "Setting persistence..."
progress_indicator 3 "Saving state"
cat > /userdata/system/custom.sh <<EOF
#!/bin/sh
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun
ip link set wlan0 up
iptables -F INPUT
iptables -P INPUT ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 445 -j ACCEPT
iptables -A INPUT -p udp --dport 137-139 -j ACCEPT
if ! pgrep -f "dropbear.*-p 22" > /dev/null; then
    pkill -f dropbear || true
    sleep 1
    /usr/sbin/dropbear -s -p 22 || echo "Dropbear failed" >> /tmp/custom.log
fi
mkdir -p /var/run/tailscale
ln -sf $INSTALL_DIR/tailscaled.sock /var/run/tailscale/tailscaled.sock
if ! pgrep -f "$INSTALL_DIR/bin/tailscaled" > /dev/null; then
    $INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
    sleep 10
    TAILSCALE_ARGS="--hostname=$HOSTNAME --advertise-tags=$TAG --accept-routes"
    [[ "$SUBNET_ENABLE" == "yes" ]] && TAILSCALE_ARGS="\$TAILSCALE_ARGS --advertise-routes=$SUBNET"
    [[ "$EXITNODE_ENABLE" == "yes" ]] && TAILSCALE_ARGS="\$TAILSCALE_ARGS --advertise-exit-node"
    [ -f "$INSTALL_DIR/tailscaled.state" ] && $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up \$TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1
fi
sleep 15
if ! pgrep -f "smbd" > /dev/null; then
    smbd -D -s /etc/samba/smb.conf || echo "Samba failed" >> /tmp/custom.log
fi
EOF
chmod +x /userdata/system/custom.sh
[ -f /userdata/system/custom.sh ] || { log "$RED" "ERROR: custom.sh failed."; exit 1; }

log "$BLUE" "Saving overlay..."
batocera-save-overlay && log "$GREEN" "‚úÖ Overlay saved." || { log "$RED" "Overlay failed."; exit 1; }

# Final Confirmation Before Reboot
log "$YELLOW" "Setup complete! Review settings before reboot:"
echo -e "${CYAN}Tailscale Version: $TAILSCALE_VERSION${NC}"
echo -e "${CYAN}Tailscale IP: $TAILSCALE_IP${NC}"
echo -e "${CYAN}SSH Authentication Mode: $AUTH_MODE${NC}"
[[ "$SUBNET_ENABLE" == "yes" ]] && echo -e "${CYAN}Subnet Routing: $SUBNET${NC}"
[[ "$EXITNODE_ENABLE" == "yes" ]] && echo -e "${CYAN}Exit Node: Enabled${NC}" || echo -e "${CYAN}Exit Node: Disabled${NC}"
read -rp "Ready to reboot? (yes/no): " REBOOT_CONFIRM
if [[ "$REBOOT_CONFIRM" != "yes" ]]; then
    log "$RED" "Reboot canceled‚Äîreview settings manually."
    exit 1
fi

# Completion Message
banner "Setup Complete!"
log "$GREEN" "‚úÖ Tailscale & SSH configured!"
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$YELLOW" "SSH Commands:"
    log "$GREEN" "  ssh ${HOSTNAME}-local  # Local IP"
    log "$GREEN" "  ssh ${HOSTNAME}-tailscale  # Tailscale IP"
    log "$GREEN" "  ssh $HOSTNAME  # Hostname"
else
    log "$YELLOW" "SSH: ssh root@$TAILSCALE_IP"
    log "$CYAN" "   - Password: linux"
fi
log "$YELLOW" "Samba access (read/write):"
log "$CYAN" "   - Local: smb://$LOCAL_IP/share"
log "$CYAN" "   - Tailscale: smb://$TAILSCALE_IP/share"
[[ "$SUBNET_ENABLE" == "yes" ]] && log "$YELLOW" "Subnet routing enabled: Approve $SUBNET in Tailscale Admin."
[[ "$EXITNODE_ENABLE" == "yes" ]] && log "$YELLOW" "Exit node enabled: Approve in Tailscale Admin if needed."
log "$GREEN" "Rebooting in 5..."
sleep 5
sync
# Force reboot with SSH cleanup
pkill -f "dropbear.*2222" || true  # Kill temporary Dropbear (if any)
kill -9 $PPID 2>/dev/null  # Kill parent SSH session
reboot -f || { log "$RED" "Reboot failed‚Äîtrying fallback..."; reboot; }
