#!/bin/bash
# Ultimate Batocera Tailscale & SSH Setup (Menu Version)
# Version: 15.5 - Fixed IP/Hostname Timing, No Dropbear Restart During Session
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

LOG_FILE="/userdata/system/setup.log"
INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="$INSTALL_DIR/keys"
DROPBEAR_KEY="$SSH_DIR/id_dropbear"
OPENSSH_KEY="$KEYS_DIR/id_ed25519_batocera"
CONFIG_FILE="/userdata/system/tailscale.conf"
WATCHDOG_SCRIPT="/userdata/system/tailscale_watchdog.sh"

log() {
    echo -e "${1}[$(date '+%Y-%m-%d %H:%M:%S')] ${2}${NC} ${MAGENTA}‚ö°${NC}" | tee -a "$LOG_FILE"
}

banner() {
    local text="$1"
    local width=60
    local border=$(printf "%${width}s" '' | tr ' ' '=')
    echo -e "${BLUE}${border}${NC}" | tee -a "$LOG_FILE"
    printf "${MAGENTA}%${width}s\n${NC}" "$text" | tr ' ' '.' | tee -a "$LOG_FILE"
    echo -e "${BLUE}${border}${NC}" | tee -a "$LOG_FILE"
}

progress_indicator() {
    local duration=$1
    local message="$2"
    local spin=('‚†ã' '‚†ô' '‚†π' '‚†∏' '‚†º' '‚†¥' '‚†¶' '‚†ß' '‚†á' '‚†è')
    local i=0
    echo -ne "${CYAN}${message}...${NC} " | tee -a "$LOG_FILE"
    for ((t=0; t<duration*10; t++)); do
        printf "\b${spin[i]}"
        i=$(( (i+1) % 10 ))
        sleep 0.1
    done
    echo -e "\b${GREEN}‚úì${NC}" | tee -a "$LOG_FILE"
}

restart_tailscale() {
    log "$YELLOW" "Restarting Tailscale..."
    "$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" down 2>/dev/null
    sleep 2
    pkill -x tailscaled
    sleep 2
    "$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
    sleep 5
    "$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" up $TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1 || { log "$RED" "Restart failed‚Äîsee $LOG_FILE"; cat /tmp/tailscaled.log >> "$LOG_FILE"; return 1; }
    log "$GREEN" "‚úÖ Tailscale restarted successfully!"
}

setup_watchdog() {
    log "$BLUE" "Creating Tailscale watchdog script..."
    cat > "$WATCHDOG_SCRIPT" <<EOF
#!/bin/sh
if ! pgrep -x "tailscaled" > /dev/null; then
    echo "[\$(date)] Tailscale not running! Restarting..." >> /userdata/system/watchdog.log
    $INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
    sleep 10
    $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up $TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1
fi
EOF
    chmod +x "$WATCHDOG_SCRIPT"
    if command -v crond &>/dev/null; then
        log "$BLUE" "Scheduling watchdog as a cron job (runs every 5 minutes)..."
        mkdir -p /var/spool/cron/crontabs
        echo "*/5 * * * * /userdata/system/tailscale_watchdog.sh" > /var/spool/cron/crontabs/root
        crond || log "$YELLOW" "Warning: crond not started‚Äîwatchdog may not run."
    else
        log "$YELLOW" "crond not found‚Äîusing loop-based watchdog (runs every 5 minutes)..."
        echo "while true; do /userdata/system/tailscale_watchdog.sh; sleep 300; done" > /userdata/system/watchdog_loop.sh
        chmod +x /userdata/system/watchdog_loop.sh
        nohup /userdata/system/watchdog_loop.sh &>/dev/null &
    fi
}

# Ensure script is run as root
[ "$(id -u)" -ne 0 ] && { log "$RED" "ERROR: Run as root."; exit 1; }

clear
banner "Batocera Tailscale & SSH Setup (v15.5)"
echo -e "${CYAN}Setup Tailscale, SSH, Samba with full automation.${NC}"

# Detect active SSH sessions
ACTIVE_SSH_SESSIONS=$(who | grep pts | wc -l)
if [[ "$ACTIVE_SSH_SESSIONS" -gt 0 ]]; then
    log "$YELLOW" "‚ö†Ô∏è Active SSH session detected‚ÄîDropbear will NOT restart to prevent disconnecting you."
fi

# Check internet connection
if ! ping -c 3 8.8.8.8 &>/dev/null; then
    log "$RED" "ERROR: No internet connection detected. Connect to the internet and try again."
    exit 1
fi

# Check if curl is installed
if ! command -v curl &>/dev/null; then
    log "$RED" "ERROR: curl is not installed. Please install it and rerun the script."
    exit 1
fi

# Load config defaults
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
    log "$YELLOW" "Loaded defaults: AUTH_KEY=${AUTH_KEY:-none}, HOSTNAME=${HOSTNAME:-none}, TAG=${TAG:-none}"
    read -rp "Use these defaults? (yes/no): " USE_DEFAULTS
    [[ "$USE_DEFAULTS" != "yes" ]] && unset AUTH_KEY HOSTNAME TAG SUBNET_ENABLE SUBNET EXITNODE_ENABLE AUTH_MODE API_KEY
fi

# Get Local IP early
LOCAL_IP=$(ip -4 addr show | grep -oE "inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | awk '{print $2}' | grep -v "127.0.0.1" | head -n 1)
[[ -z "$LOCAL_IP" ]] && { log "$RED" "ERROR: Local IP not found."; LOCAL_IP="<LOCAL_IP>"; } || log "$BLUE" "Local IP: $LOCAL_IP"

# Set hostname early
DEFAULT_HOSTNAME=$(hostname | cut -d'.' -f1)
read -rp "Enter hostname [${HOSTNAME:-$DEFAULT_HOSTNAME}]: " USER_HOSTNAME
HOSTNAME="${USER_HOSTNAME:-${HOSTNAME:-$DEFAULT_HOSTNAME}}"

# SSH Authentication Mode Selection
log "$YELLOW" "Step 1: SSH Authentication"
if [ -f "$DROPBEAR_KEY" ]; then
    log "$GREEN" "‚úÖ SSH key detected‚Äîkey authentication recommended."
else
    log "$YELLOW" "No SSH key detected‚Äîwill generate one if you choose key auth."
fi
echo "Choose your SSH authentication method:"
echo "1) Password (default: root/linux)"
echo "2) Key-based authentication (recommended)"
read -rp "Select an option (1/2) [${AUTH_MODE:-2}]: " SSH_CHOICE
SSH_CHOICE="${SSH_CHOICE:-${AUTH_MODE:-2}}"
[[ "$SSH_CHOICE" == "2" ]] && AUTH_MODE="key" || AUTH_MODE="password"

# SSH Key Setup (if key mode)
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$BLUE" "Configuring SSH key authentication..."
    mkdir -p "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
    chmod 700 "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
    if [ ! -f "$DROPBEAR_KEY" ]; then
        log "$GREEN" "üîë Generating SSH key..."
        progress_indicator 3 "Forging key"
        dropbearkey -t ed25519 -f "$DROPBEAR_KEY" || { log "$RED" "Key gen failed."; exit 1; }
        chmod 600 "$DROPBEAR_KEY"
        dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { log "$RED" "Pubkey failed."; exit 1; }
        chmod 600 /etc/dropbear/authorized_keys
    fi
    dropbearconvert dropbear openssh "$DROPBEAR_KEY" "$OPENSSH_KEY" || { log "$RED" "Key conversion failed."; exit 1; }
    chmod 600 "$OPENSSH_KEY"

    # Dropbear Configuration without restart
    log "$BLUE" "Configuring Dropbear..."
    touch /etc/dropbear/dropbear.conf
    [[ ! -w /etc/dropbear/dropbear.conf ]] && { log "$RED" "ERROR: Cannot write Dropbear config."; exit 1; }
    sed -i '/^PasswordAuth/d' /etc/dropbear/dropbear.conf 2>/dev/null || true
    echo "PasswordAuth no" > /etc/dropbear/dropbear.conf

    # SSH Key Distribution
    banner "SSH Key Download Instructions"
    log "$BLUE" "Generating SSH config file for easy access..."
    cat > "$KEYS_DIR/ssh_config" <<EOF
Host ${HOSTNAME}-local
    HostName $LOCAL_IP
    User root
    IdentityFile ~/.ssh/id_ed25519_batocera_$HOSTNAME
    StrictHostKeyChecking no

Host ${HOSTNAME}-tailscale
    HostName <TAILSCALE_IP_HERE>
    User root
    IdentityFile ~/.ssh/id_ed25519_batocera_$HOSTNAME
    StrictHostKeyChecking no
EOF
    chmod 644 "$KEYS_DIR/ssh_config"
    log "$YELLOW" "Starting temporary key server..."
    log "$CYAN" "INSTRUCTIONS: On your PC, open a new terminal (e.g., PowerShell) and run these commands:"
    log "$CYAN" "  1. curl -O http://$LOCAL_IP:8080/id_ed25519_batocera"
    log "$CYAN" "  2. curl -O http://$LOCAL_IP:8080/ssh_config"
    log "$CYAN" "  3. Move the key: move id_ed25519_batocera C:\\Users\\Willi\\.ssh\\id_ed25519_batocera_$HOSTNAME"
    log "$CYAN" "  4. Set permissions: icacls \"C:\\Users\\Willi\\.ssh\\id_ed25519_batocera_$HOSTNAME\" /inheritance:r /grant:r \"Willi:F\""
    log "$CYAN" "  5. Edit ssh_config‚Äîreplace <TAILSCALE_IP_HERE> with your Tailscale IP (shown later)."
    log "$CYAN" "  6. Append config: type ssh_config >> C:\\Users\\Willi\\.ssh\\config"
    log "$CYAN" "  7. Delete temp file: del ssh_config"
    log "$CYAN" "For Linux/macOS:"
    log "$CYAN" "  mv id_ed25519_batocera ~/.ssh/id_ed25519_batocera_$HOSTNAME"
    log "$CYAN" "  chmod 600 ~/.ssh/id_ed25519_batocera_$HOSTNAME"
    log "$CYAN" "  nano ssh_config‚Äîreplace <TAILSCALE_IP_HERE> with Tailscale IP"
    log "$CYAN" "  cat ssh_config >> ~/.ssh/config"
    python3 -m http.server 8080 --directory "$KEYS_DIR" & SERVER_PID=$!
    sleep 2
    log "$YELLOW" "Download key: curl -O http://$LOCAL_IP:8080/id_ed25519_batocera"
    log "$YELLOW" "Download SSH config: curl -O http://$LOCAL_IP:8080/ssh_config"
    read -rp "Press Enter when you've downloaded both files..."
    kill $SERVER_PID 2>/dev/null
    log "$GREEN" "‚úÖ Key server stopped."
fi

# Detect latest Tailscale version
log "$BLUE" "Detecting latest Tailscale stable version for arm64..."
progress_indicator 2 "Fetching version"
LATEST_VERSION=$(curl -s "https://pkgs.tailscale.com/stable/" | grep -oP 'tailscale_\K[0-9]+\.[0-9]+\.[0-9]+(?=_arm64\.tgz)' | sort -V | tail -n 1)
if [[ -z "$LATEST_VERSION" ]]; then
    log "$RED" "ERROR: Could not fetch latest Tailscale version‚Äîfalling back to 1.80.2."
    TAILSCALE_VERSION="1.80.2"
else
    TAILSCALE_VERSION="$LATEST_VERSION"
    log "$GREEN" "‚úÖ Latest version detected: $TAILSCALE_VERSION"
fi

# Prompt for Tailscale Auth Key and API Key
log "$YELLOW" "Step 2: Tailscale Setup"
log "$CYAN" "You'll need your Tailscale auth key from https://login.tailscale.com/admin/settings/keys"
read -rp "Enter your Tailscale auth key [${AUTH_KEY:-none}]: " INPUT_AUTH_KEY
AUTH_KEY="${INPUT_AUTH_KEY:-$AUTH_KEY}"
[[ -z "$AUTH_KEY" ]] && { log "$RED" "ERROR: Auth key required."; exit 1; }
[[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid auth key format."; exit 1; }
log "$CYAN" "API key (optional) auto-approves subnet/exit node‚Äîget it from https://login.tailscale.com/admin/settings/keys"
read -rp "Enter your Tailscale API key (optional) [${API_KEY:-none}]: " INPUT_API_KEY
API_KEY="${INPUT_API_KEY:-$API_KEY}"

# Set tag
DEFAULT_TAG="tag:ssh-batocera"
read -rp "Enter Tailscale tag [${TAG:-$DEFAULT_TAG}]: " INPUT_TAG
TAG="${INPUT_TAG:-${TAG:-$DEFAULT_TAG}}"

# Subnet Routing Option
log "$YELLOW" "Step 3: Subnet Routing"
echo "Enable subnet routing to share your local network over Tailscale?"
echo "1) Yes"
echo "2) No (default)"
read -rp "Select an option (1/2) [2]: " SUBNET_CHOICE
SUBNET_CHOICE="${SUBNET_CHOICE:-2}"
if [[ "$SUBNET_CHOICE" == "1" ]]; then
    log "$BLUE" "Detecting network subnet..."
    GATEWAY_IP=$(ip route show default | awk '/default/ {print $3}')
    if [[ -n "$GATEWAY_IP" ]]; then
        SUBNET_DEFAULT=$(echo "$GATEWAY_IP" | awk -F. '{print $1"."$2"."$3".0/24"}')
        read -rp "Use detected subnet (${SUBNET_DEFAULT})? (yes/no) [yes]: " CONFIRM_SUBNET
        CONFIRM_SUBNET="${CONFIRM_SUBNET:-yes}"
        if [[ "$CONFIRM_SUBNET" == "yes" ]]; then
            SUBNET="$SUBNET_DEFAULT"
        else
            read -rp "Enter your subnet (e.g., 192.168.50.0/24): " SUBNET
        fi
    else
        read -rp "Enter your subnet (e.g., 192.168.50.0/24): " SUBNET
    fi
    if [[ ! "$SUBNET" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$ ]]; then
        log "$RED" "Invalid subnet format. Please enter a valid CIDR range (e.g., 192.168.1.0/24)."
        exit 1
    fi
    SUBNET_ENABLE="yes"
else
    SUBNET_ENABLE="no"
fi

# Exit Node Option
log "$YELLOW" "Step 4: Exit Node"
echo "Advertise this device as an exit node?"
echo "1) Yes"
echo "2) No (default)"
read -rp "Select an option (1/2) [${EXITNODE_ENABLE:-2}]: " EXITNODE_CHOICE
EXITNODE_CHOICE="${EXITNODE_CHOICE:-${EXITNODE_ENABLE:-2}}"
if [[ "$EXITNODE_CHOICE" == "1" ]]; then
    EXITNODE_ENABLE="yes"
    log "$GREEN" "‚úÖ Exit node enabled‚Äîwill auto-approve if API key provided."
else
    EXITNODE_ENABLE="no"
fi

# Tailscale Installation
log "$BLUE" "Installing Tailscale $TAILSCALE_VERSION..."
progress_indicator 5 "Downloading Tailscale"
mkdir -p "$INSTALL_DIR/bin"
wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "$RED" "Download failed."; exit 1; }
tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 || { log "$RED" "Extraction failed."; exit 1; }
rm "$INSTALL_DIR/tailscale.tgz"
chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled"

log "$BLUE" "Starting Tailscale..."
progress_indicator 3 "Starting Tailscale"
pkill -x tailscaled || true
mkdir -p /var/run/tailscale
ln -sf "$INSTALL_DIR/tailscaled.sock" /var/run/tailscale/tailscaled.sock
"$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
sleep 10
TAILSCALE_ARGS="--authkey=$AUTH_KEY --hostname=$HOSTNAME --advertise-tags=$TAG --accept-routes"
[[ "$SUBNET_ENABLE" == "yes" ]] && TAILSCALE_ARGS="$TAILSCALE_ARGS --advertise-routes=$SUBNET"
[[ "$EXITNODE_ENABLE" == "yes" ]] && TAILSCALE_ARGS="$TAILSCALE_ARGS --advertise-exit-node --accept-routes"
"$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" up $TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1 || { log "$RED" "Tailscale failed‚Äîsee $LOG_FILE"; cat /tmp/tailscaled.log >> "$LOG_FILE"; exit 1; }
sleep 5

# Verify Tailscale and Get IP/Device ID
if "$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" status &>/dev/null; then
    log "$GREEN" "‚úÖ Tailscale running."
    TRIES=0
    MAX_TRIES=20
    while [[ -z "$TAILSCALE_IP" && $TRIES -lt $MAX_TRIES ]]; do
        sleep 3
        TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null)
        ((TRIES++))
        [[ $TRIES -eq $MAX_TRIES ]] && { 
            log "$YELLOW" "‚ö†Ô∏è Tailscale IP not assigned after $MAX_TRIES tries."
            read -rp "Retry? (yes/no): " RETRY
            [[ "$RETRY" == "yes" ]] && TRIES=0 || TAILSCALE_IP="$LOCAL_IP"
        }
    done
    [[ -n "$TAILSCALE_IP" ]] && log "$GREEN" "‚úÖ Tailscale IP: $TAILSCALE_IP" || log "$YELLOW" "Using local IP: $TAILSCALE_IP"
    TRIES=0
    MAX_TRIES=5
    while [[ -z "$DEVICE_ID" && $TRIES -lt $MAX_TRIES ]]; do
        sleep 5
        DEVICE_ID=$("$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" status | grep -oP '^\S+' | head -n 1)
        ((TRIES++))
    done
    [[ -n "$DEVICE_ID" ]] && log "$BLUE" "Device ID: $DEVICE_ID" || log "$YELLOW" "Could not fetch Device ID‚ÄîAPI approval skipped."
else
    log "$RED" "ERROR: Tailscale not running‚Äîcheck $LOG_FILE"
    cat /tmp/tailscaled.log >> "$LOG_FILE"
    exit 1
fi

# Update SSH Config with Tailscale IP
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$BLUE" "Updating SSH config with Tailscale IP: $TAILSCALE_IP..."
    sed -i "s/<TAILSCALE_IP_HERE>/$TAILSCALE_IP/" "$KEYS_DIR/ssh_config"
    log "$CYAN" "SSH config updated‚Äîre-download if needed:"
    log "$CYAN" "  curl -O http://$LOCAL_IP:8080/ssh_config"
    log "$CYAN" "Then append again: type ssh_config >> C:\\Users\\Willi\\.ssh\\config (Windows)"
    log "$CYAN" "Or: cat ssh_config >> ~/.ssh/config (Linux/macOS)"

    # SSH Testing
    banner "SSH Testing Instructions"
    log "$CYAN" "Test SSH access from your PC in a new terminal:"
    log "$GREEN" "  ssh -i ~/.ssh/id_ed25519_batocera_$HOSTNAME root@$TAILSCALE_IP"
    log "$GREEN" "  Or: ssh ${HOSTNAME}-local  or  ssh ${HOSTNAME}-tailscale"
    log "$YELLOW" "If SSH fails:"
    log "$YELLOW" "  - Check key path (e.g., C:\\Users\\Willi\\.ssh\\id_ed25519_batocera_$HOSTNAME)"
    log "$YELLOW" "  - Verify ~/.ssh/config has the aliases"
    log "$YELLOW" "  - Manually restart Dropbear if needed: /usr/sbin/dropbear -s -p 22"
    read -rp "Did SSH work successfully? (yes/no): " SSH_TEST
    if [[ "$SSH_TEST" != "yes" ]]; then
        log "$RED" "‚ùå SSH test failed‚Äîfix before proceeding."
        log "$CYAN" "Manual Dropbear restart (if needed): /usr/sbin/dropbear -s -p 22"
        log "$YELLOW" "Retest SSH‚Äîdo not proceed until it works."
        exit 1
    fi
    log "$GREEN" "‚úÖ SSH test passed!"
fi

# Auto-Approve Subnet/Exit Node via API
if [[ -n "$API_KEY" && ( "$SUBNET_ENABLE" == "yes" || "$EXITNODE_ENABLE" == "yes" ) && -n "$DEVICE_ID" ]]; then
    log "$BLUE" "Auto-approving routes via Tailscale API..."
    if [[ "$SUBNET_ENABLE" == "yes" ]]; then
        curl -X POST "https://api.tailscale.com/api/v2/device/$DEVICE_ID/routes" \
             -H "Authorization: Bearer $API_KEY" \
             -d "{\"routes\": [\"$SUBNET\"]}" > /tmp/api_response.log 2>&1 || log "$YELLOW" "Subnet approval failed‚Äîmanual approval needed at https://login.tailscale.com/admin/machines"
        log "$GREEN" "‚úÖ Subnet $SUBNET submitted for approval."
    fi
    if [[ "$EXITNODE_ENABLE" == "yes" ]]; then
        curl -X POST "https://api.tailscale.com/api/v2/device/$DEVICE_ID/authorized" \
             -H "Authorization: Bearer $API_KEY" \
             -d '{"authorized": true}' > /tmp/api_response.log 2>&1 || log "$YELLOW" "Exit node approval failed‚Äîmanual approval needed at https://login.tailscale.com/admin/machines"
        log "$GREEN" "‚úÖ Exit node authorization submitted."
    fi
else
    [[ "$SUBNET_ENABLE" == "yes" || "$EXITNODE_ENABLE" == "yes" ]] && log "$YELLOW" "API approval skipped‚Äîmanually approve subnet/exit node at https://login.tailscale.com/admin/machines"
fi

# Samba Configuration
log "$BLUE" "Configuring Samba for file sharing..."
mkdir -p /etc/samba
cat > /etc/samba/smb.conf <<EOF
[global]
workgroup = WORKGROUP
server string = Batocera Share
server min protocol = SMB2
vfs objects = fruit streams_xattr
fruit:locking = none
fruit:resource = file
fruit:metadata = stream
security = user
map to guest = Bad User
[share]
path = /userdata
writeable = yes
guest ok = yes
create mask = 0666
directory mask = 0777
force user = root
EOF
if ! pgrep -f "smbd" > /dev/null; then
    smbd -D -s /etc/samba/smb.conf || { log "$RED" "Samba start failed."; exit 1; }
else
    log "$YELLOW" "Samba already running‚Äîskipping restart."
fi

# Tailscale Restart Option
log "$YELLOW" "Tailscale Restart Option"
echo "Would you like to restart Tailscale?"
echo "1) Yes"
echo "2) No (default)"
read -rp "Select an option (1/2): " RESTART_TAILSCALE
[[ "$RESTART_TAILSCALE" == "1" ]] && restart_tailscale

# Save Config
log "$BLUE" "Saving configuration..."
cat > "$CONFIG_FILE" <<EOF
AUTH_KEY="$AUTH_KEY"
HOSTNAME="$HOSTNAME"
TAG="$TAG"
SUBNET_ENABLE="$SUBNET_ENABLE"
SUBNET="$SUBNET"
EXITNODE_ENABLE="$EXITNODE_ENABLE"
AUTH_MODE="$AUTH_MODE"
API_KEY="$API_KEY"
EOF

# Persistence
log "$BLUE" "Setting persistence..."
progress_indicator 3 "Saving state"
cat > /userdata/system/custom.sh <<EOF
#!/bin/sh
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun
ip link set wlan0 up
iptables -F INPUT
iptables -P INPUT ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 445 -j ACCEPT
iptables -A INPUT -p udp --dport 137-139 -j ACCEPT
if ! pgrep -f "dropbear" > /dev/null; then
    pkill -f dropbear || true
    sleep 1
    /usr/sbin/dropbear -s -p 22 || echo "Dropbear failed" >> /tmp/custom.log
fi
mkdir -p /var/run/tailscale
ln -sf $INSTALL_DIR/tailscaled.sock /var/run/tailscale/tailscaled.sock
if ! pgrep -x "tailscaled" > /dev/null; then
    $INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
    sleep 10
    TAILSCALE_ARGS="--hostname=$HOSTNAME --advertise-tags=$TAG --accept-routes"
    [[ "$SUBNET_ENABLE" == "yes" ]] && TAILSCALE_ARGS="\$TAILSCALE_ARGS --advertise-routes=$SUBNET"
    [[ "$EXITNODE_ENABLE" == "yes" ]] && TAILSCALE_ARGS="\$TAILSCALE_ARGS --advertise-exit-node --accept-routes"
    [ -f "$INSTALL_DIR/tailscaled.state" ] && $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up \$TAILSCALE_ARGS > /tmp/tailscaled.log 2>&1
fi
sleep 15
if ! pgrep -f "smbd" > /dev/null; then
    smbd -D -s /etc/samba/smb.conf || echo "Samba failed" >> /tmp/custom.log
fi
EOF
chmod +x /userdata/system/custom.sh
[ -f "/userdata/system/custom.sh" ] || { log "$RED" "ERROR: custom.sh failed."; exit 1; }

log "$BLUE" "Saving overlay..."
batocera-save-overlay && sync && log "$GREEN" "‚úÖ Overlay saved." || { log "$RED" "Overlay failed."; exit 1; }

# Setup Watchdog
setup_watchdog

# Final Confirmation
banner "Setup Complete!"
log "$GREEN" "‚úÖ Tailscale & SSH configured!"
"$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" version > /tmp/tailscale_version.log 2>&1
log "$CYAN" "Tailscale Version: $(cat /tmp/tailscale_version.log | head -n 1)"
log "$CYAN" "Tailscale IP: $TAILSCALE_IP"
log "$CYAN" "SSH Authentication Mode: $AUTH_MODE"
[[ "$SUBNET_ENABLE" == "yes" ]] && log "$CYAN" "Subnet Routing: $SUBNET" || log "$CYAN" "Subnet Routing: None"
[[ "$EXITNODE_ENABLE" == "yes" ]] && log "$CYAN" "Exit Node: Enabled" || log "$CYAN" "Exit Node: Disabled"
log "$CYAN" "Watchdog: Running every 5 minutes (or loop if crond unavailable)"
if [[ "$AUTH_MODE" == "key" ]]; then
    log "$GREEN" "SSH: ssh ${HOSTNAME}-local  or  ssh ${HOSTNAME}-tailscale"
    log "$YELLOW" "If SSH stops working after reboot, manually restart Dropbear: /usr/sbin/dropbear -s -p 22"
else
    log "$GREEN" "SSH: ssh root@$TAILSCALE_IP (password: linux)"
fi
log "$YELLOW" "All services running‚Äîreboot optional."
read -rp "Reboot now? (yes/no): " REBOOT_CONFIRM
if [[ "$REBOOT_CONFIRM" == "yes" ]]; then
    log "$GREEN" "Rebooting in 5..."
    sleep 5
    sync
    reboot -f || { log "$RED" "Reboot failed‚Äîtry manually."; }
else
    log "$GREEN" "Setup complete‚Äîno reboot. Log: $LOG_FILE"
fi
