#!/bin/bash
#
# Ultimate SSH Key & Tailscale Setup for Batocera
# Version: 11.2 - Fully Automated, Tailscale File Sharing, OpenSSH Key
#

# --- Colors ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# --- Logging Function ---
log() {
    echo -e "${1}[$(date '+%Y-%m-%d %H:%M:%S')] ${2}${NC}"
}

# --- Configuration ---
TAILSCALE_VERSION="1.80.2"
INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="$INSTALL_DIR/keys"
LOCAL_SSH_PORT="22"

# --- Functions ---
generate_random_password() {
  head /dev/urandom | tr -dc A-Za-z0-9\~\!\@\#\$\%\^\&\*\(\)-_\=\+\[\]\{\}\;\:\'\"\,\<\.\>\/\? | head -c 32
}

# --- Script Start ---
clear
echo -e "${YELLOW}Tailscale & SSH Key Setup for Batocera${NC}"

# --- Root Check ---
[ "$(id -u)" -ne 0 ] && { log "$RED" "Must be run as root."; exit 1; }

# --- Ensure TUN Device ---
log "$BLUE" "Ensuring TUN device exists..."
modprobe tun
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun

# --- User Prompts ---
read -rp "Enter your Tailscale auth key: " AUTH_KEY
[[ -z "$AUTH_KEY" ]] && { log "$RED" "ERROR: Auth key required."; exit 1; }
[[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid auth key format."; exit 1; }

read -rp "Enter a hostname (default: batocera-pi): " USER_HOSTNAME
HOSTNAME="${USER_HOSTNAME:-batocera-pi}"

read -rp "Enter your Tailscale tag (e.g., tag:ssh-batocera-1): " TAG
[[ -z "$TAG" ]] && { log "$RED" "ERROR: Tag required."; exit 1; }

log "$GREEN" "‚úÖ Using hostname: $HOSTNAME"
log "$GREEN" "‚úÖ Using Tailscale tag: $TAG"

# --- Detect Local IP ---
LOCAL_IP=$(ip -4 addr show | grep -oE "inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | awk '{print $2}' | grep -v "127.0.0.1" | head -n 1)
[[ -z "$LOCAL_IP" ]] && { log "$RED" "Could not determine local IP."; LOCAL_IP="<LOCAL_IP>"; } || log "$BLUE" "Detected local IP: $LOCAL_IP"

# --- Setup Directories ---
mkdir -p "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
chmod 700 "$SSH_DIR" "$KEYS_DIR" /etc/dropbear

# --- Generate OpenSSH Key ---
OPENSSH_KEY="$KEYS_DIR/id_ed25519_batocera"
log "$GREEN" "üîë Generating new OpenSSH key..."
rm -f "$OPENSSH_KEY" "$OPENSSH_KEY.pub"  # Clear old keys, if any
ssh-keygen -t ed25519 -f "$OPENSSH_KEY" -N "" || { log "$RED" "Key generation failed"; exit 1; }
chmod 600 "$OPENSSH_KEY"

# Copy the public key to /etc/dropbear/authorized_keys
cat "$OPENSSH_KEY.pub" > /etc/dropbear/authorized_keys
chmod 600 /etc/dropbear/authorized_keys

# --- Save Overlay Early ---
log "$BLUE" "Saving overlay to persist SSH config..."
batocera-save-overlay || { log "$RED" "Overlay save failed"; exit 1; }

# --- Install Tailscale ---
mkdir -p "$INSTALL_DIR/bin"
wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "$RED" "Tailscale download failed."; exit 1; }
tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 || { log "$RED" "Tailscale extraction failed."; exit 1; }
rm "$INSTALL_DIR/tailscale.tgz"
chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled"

# --- Start Tailscale ---
log "$BLUE" "Starting Tailscale daemon..."
pkill -f "tailscaled" || true  # Clear any old instances
"$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" &
sleep 10

"$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" up --authkey="$AUTH_KEY" --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes || { log "$RED" "Tailscale up failed"; exit 1; }
sleep 5

# --- Wait for Tailscale IP Assignment ---
log "$BLUE" "Waiting for Tailscale IP assignment..."
TRIES=0
TAILSCALE_IP=""
while [[ -z "$TAILSCALE_IP" && $TRIES -lt 10 ]]; do
    sleep 3
    TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null)
    ((TRIES++))
done
[[ -z "$TAILSCALE_IP" ]] && { log "$YELLOW" "‚ö†Ô∏è Tailscale IP not assigned after 30s. Using Local IP."; TAILSCALE_IP="$LOCAL_IP"; } || log "$GREEN" "‚úÖ Tailscale IP: $TAILSCALE_IP"

# --- Use 'tailscale file cp' to make the key available (AFTER Tailscale is up) ---
if pgrep -f "$INSTALL_DIR/bin/tailscaled" > /dev/null; then
  "$INSTALL_DIR/bin/tailscale" file cp "$OPENSSH_KEY" . || { log "$RED" "Failed to copy key to Tailscale file sharing"; exit 1; }
else
	log "$RED" "Tailscale is not running. Cannot copy the key to Tailscale file sharing."
fi

# --- Configure Persistence ---
log "$BLUE" "Setting up persistence with fallback..."
cat > /userdata/system/custom.sh <<EOF
#!/bin/sh
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun
pkill -f dropbear || true
sleep 1
if [ -s "/etc/dropbear/authorized_keys" ]; then
    /usr/sbin/dropbear -s -p 22 || /usr/sbin/dropbear -p 22
else
    /usr/sbin/dropbear -p 22
fi
sleep 1
if ! pgrep -f "$INSTALL_DIR/bin/tailscaled" > /dev/null; then
    $INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock &
    sleep 10
    if [ -s "$INSTALL_DIR/tailscaled.state" ]; then
        $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes
    else
        $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up --authkey="$AUTH_KEY" --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes
    fi
fi
ip route del 192.168.50.0/24 dev tailscale0 table 52 2>/dev/null || true
EOF
chmod +x /userdata/system/custom.sh

# --- Start Temporary Dropbear Instance (Port 2222) ---
log "$BLUE" "Starting temporary Dropbear instance on port 2222 (key-only)..."
/usr/sbin/dropbear -s -p 2222 -B &

# --- Instructions (Using 'tailscale file get') ---
log "$GREEN" "‚úÖ Setup Complete (Phase 1)!"
log "$YELLOW" "‚ö†Ô∏è IMPORTANT: Download your SSH key NOW before proceeding."

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  log "$CYAN" "On your Linux/WSL machine, run:"
  echo -e "${YELLOW}tailscale file get${NC}"
elif [[ "$OSTYPE" == "darwin" ]]; then
  log "$CYAN" "On your macOS machine, run:"
  echo -e "${YELLOW}tailscale file get${NC}"
elif [[ "$OSTYPE" =~ ^(cygwin|msys|mingw) ]]; then
  log "$CYAN" "On your Windows machine (PowerShell or Git Bash), run:"
  echo -e "${YELLOW}tailscale file get${NC}"
else
  log "$YELLOW" "Could not determine your OS.  Use 'tailscale file get' to download your key."
fi

log "$CYAN" "Download the file named 'id_ed25519_batocera'."
log "$CYAN" "Move it to your SSH directory (e.g., ~/.ssh on Linux/macOS/WSL, C:\\Users\\YourUser\\.ssh on Windows)."
log "$CYAN" "Set permissions:"
echo -e "${YELLOW}chmod 600 ~/.ssh/id_ed25519_batocera${NC} (Linux/macOS/WSL)"
echo -e "${YELLOW}# Windows: Use File Explorer to set permissions (or equivalent PowerShell command)${NC}"
log "$CYAN" "Test SSH (separate terminal, port 2222):"
echo -e "${YELLOW}ssh -i ~/.ssh/id_ed25519_batocera -p 2222 root@$LOCAL_IP${NC}"

log "$YELLOW" "Type 'yes' if SSH works on port 2222, 'no' if it doesn‚Äôt."
read -rp "Did SSH key authentication work? (yes/no): " KEY_WORKS

if [[ "$KEY_WORKS" =~ ^[Yy]es$ ]]; then
    log "$GREEN" "‚úÖ SSH key confirmed!"
    NEW_PASSWORD=$(generate_random_password)
    echo "root:$NEW_PASSWORD" | chpasswd
    log "$RED" "IMPORTANT: Root password reset to random value‚Äîuse SSH key only."
        # --- Restart Dropbear Safely ---
    log "$BLUE" "Starting Dropbear with key auth on port 22..."
    pkill -f dropbear || true
    sleep 1
    /usr/sbin/dropbear -s -p 22 || { log "$RED" "Dropbear start failed! Falling back..."; /usr/sbin/dropbear -p 22 || exit 1; }
else
    log "$RED" "‚ùå SSH key not confirmed. Password auth remains‚Äîtroubleshoot."
        pkill -f "dropbear.*2222" || true
fi

log "$BLUE" "Saving final overlay..."
batocera-save-overlay || { log "$RED" "Overlay save failed"; exit 1; }
log "$GREEN" "‚úÖ Final Setup Complete! Reboot, then test with Tailscale on/off on your PC."
