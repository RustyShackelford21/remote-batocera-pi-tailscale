#!/bin/bash
#
# Tailscale and SSH Key Setup for Batocera Linux (Dropbear Focus)
# Version: 1.0.22-KeyAuth - Corrected Dropbear/PuTTY Key Handling
#

# --- Colors ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# --- Log Function ---
log() {
  local color=$1
  local message=<span class="math-inline">2
echo \-e "</span>{color}[$(date '+%Y-%m-%d %H:%M:%S')] <span class="math-inline">message</span>{NC}" | tee -a /userdata/system/logs/tailscale_sshkey_setup.log
}

# --- Progress Bar ---
show_progress() {
  local duration=<span class="math-inline">1
local total\_steps\=20
local sleep\_time\=</span>(echo "scale=2; $duration/<span class="math-inline">total\_steps" \| bc\)  \# Use bc for floating\-point
echo \-ne "</span>{CYAN}["
  for ((i=0; i<$total_steps; i++)); do
    sleep "<span class="math-inline">sleep\_time"
echo \-ne "\#"
done
echo \-e "\]</span>{NC}"
}

# --- Create Directories ---
create_dirs() {
  mkdir -p /userdata/system/logs
  mkdir -p /userdata/system/.ssh
  mkdir -p "/userdata/system/tailscale/keys"
  mkdir -p /etc/sysctl.d  # Create sysctl.d directory
  chmod 700 /userdata/system/.ssh
  chmod 700 /userdata/system/tailscale/keys
}

# --- Check Permissions ---
check_permissions() {
  if [ ! -w "/userdata/system" ]; then
    log "<span class="math-inline">\{RED\}" "Insufficient permissions to write to /userdata/system"
log "</span>{RED}" "Make sure you're running this from the Batocera terminal"
    exit 1
  fi
}

# --- Load TUN Module (Robust) ---
setup_tun_device() {
  log "<span class="math-inline">\{BLUE\}" "Setting up TUN device\.\.\."
\# Load the TUN module
if \! lsmod \| grep \-q '^tun '; then  \# More reliable check for module loading
modprobe tun \|\| \{ log "</span>{RED}" "Failed to load tun module"; exit 1; }
  fi

  # Create the /dev/net directory if it doesn't exist
  mkdir -p /dev/net

  # Create the /dev/net/tun device node if it doesn't exist
  if [ ! -c /dev/net/tun ]; then
    mknod /dev/net/tun c 10 200 || { log "<span class="math-inline">\{RED\}" "Failed to create tun device node"; exit 1; \}
chmod 666 /dev/net/tun  \# Batocera seems to need 666 for tun to work\.
fi
log "</span>{GREEN}" "TUN device setup complete."
}

# --- Script Initialization ---
clear
create_dirs()
check_permissions()
setup_tun_device()  # Setup TUN device *early*

echo -e "<span class="math-inline">\{PURPLE\}\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=</span>{NC}"
echo -e "${PURPLE}   Tailscale and SSH Key Setup for Batocera Linux        <span class="math-inline">\{NC\}"
echo \-e "</span>{PURPLE}=========================================================<span class="math-inline">\{NC\}"
echo ""
log "</span>{BLUE}" "Starting setup process..."

# --- Argument Parsing ---
TAILSCALE_ARGS=""
AUTO_CONNECT=false # This is no longer used in the same way, but kept for clarity
AUTHKEY=""
HOSTNAME="batocera-pi"
ADVERTISE_ROUTES=""
ADVERTISE_EXIT_NODE=false
ACCEPT_ROUTES=false
AUTO_REBOOT=false
TAG=""

while [[ "$#" -gt 0 ]]; do
  case <span class="math-inline">1 in
\-\-authkey\=\*\) AUTHKEY\="</span>{1#*=}" ; shift ;;
    --authkey) AUTHKEY="<span class="math-inline">2"; shift 2 ;;
\-\-hostname\=\*\) HOSTNAME\="</span>{1#*=}"; shift ;;
    --hostname) HOSTNAME="<span class="math-inline">2"; shift 2 ;;
\-\-advertise\-routes\=\*\) ADVERTISE\_ROUTES\="</span>{1#*=}"; shift ;;
    --advertise-routes) ADVERTISE_ROUTES="<span class="math-inline">2"; shift 2 ;;
\-\-exit\-node\) ADVERTISE\_EXIT\_NODE\=true; shift ;;
\-\-accept\-routes\) ACCEPT\_ROUTES\=true; shift ;;
\-\-auto\-reboot\) AUTO\_REBOOT\=true; shift ;;
\-\-tag\=\*\) TAG\="</span>{1#*=}"; shift ;;
    --tag) TAG="<span class="math-inline">2"; shift 2 ;;
\-\-help\)
echo \-e "</span>{GREEN}Usage: <span class="math-inline">0 \[OPTIONS\]</span>{NC}"
      echo ""
      echo -e "<span class="math-inline">\{CYAN\}Options\:</span>{NC}"
      echo "  --authkey=KEY             Provide Tailscale auth key (optional, will prompt if not provided)"
      echo "  --hostname=NAME           Set hostname for this device (default: batocera-pi)"
      echo "  --advertise-routes=SUBNET Advertise subnet routes (e.g., 192.168.1.0/24)"
      echo "  --exit-node               Advertise this device as an exit node"
      echo "  --accept-routes           Accept subnet routes from other devices"
      echo "  --auto-reboot             Automatically reboot after installation"
      echo "  --tag=TAG                 Apply a Tailscale tag to this device (default: ssh-batocera-1)"
      echo "  --help                    Show this help message"
      echo ""
      exit 0
      ;;
    *) log "${RED}" "Unknown parameter: <span class="math-inline">1"; exit 1 ;;
esac
done
\# \-\-\- Define Variables \-\-\-
TEMP\_DIR\="/userdata/system/tmp" \# Use /userdata/system/tmp
INSTALL\_DIR\="/userdata/system/tailscale"
SSH\_DIR\="/userdata/system/\.ssh"
KEYS\_DIR\="/userdata/system/tailscale/keys"
TAILSCALE\_DONE\_FILE\="/userdata/system/tailscale/\.installed"
DROPBEAR\_DIR\="/etc/dropbear"  \# Corrected\: Use the standard Dropbear directory
ARCH\=</span>(uname -m)
VERSION="1.80.2"
DEFAULT_TAG="tag:ssh-batocera-1" # Define the default tag.

# --- Set Tailscale URL ---
if [[ "<span class="math-inline">ARCH" \=\= "aarch64" \]\]; then
TAILSCALE\_URL\="https\://pkgs\.tailscale\.com/stable/tailscale\_</span>{VERSION}_arm64.tgz"
elif [[ "<span class="math-inline">ARCH" \=\= "armv7l" \]\]; then
TAILSCALE\_URL\="https\://pkgs\.tailscale\.com/stable/tailscale\_</span>{VERSION}_arm.tgz"
else
  log "${RED}" "Unsupported architecture: <span class="math-inline">ARCH"
log "</span>{RED}" "This script supports ARM64 (aarch64) and ARM (armv7l) architectures"
  exit 1
fi

# --- Check Prerequisites ---
check_prerequisites() {
  log "<span class="math-inline">\{BLUE\}" "Checking prerequisites\.\.\."
\# Check for curl
if \! command \-v curl &\> /dev/null; then
log "</span>{RED}" "Error: curl is required but not found."
    exit 1
  fi

  # Check for dropbear and dropbearkey
  if ! command -v dropbear &> /dev/null; then
    log "<span class="math-inline">\{RED\}" "Error\: dropbear is required but not found\."
exit 1
fi
if \! command \-v dropbearkey &\> /dev/null; then
log "</span>{RED}" "Error: dropbearkey is required but not found."
    exit 1
  fi

  # Check for dropbearconvert
  if ! command -v dropbearconvert &> /dev/null; then
    log "<span class="math-inline">\{RED\}" "Error\: dropbearconvert is required but not found\."
exit 1
fi
log "</span>{GREEN}" "Prerequisites check completed!"
}

# --- Create Directories ---
create_directories() {
  log "${BLUE}" "Step 1/9: Creating directories..."
  mkdir -p "$TEMP_DIR"  # Create the new temporary directory
  mkdir -p "$INSTALL_DIR"
  mkdir -p "$INSTALL_DIR/state"
  mkdir -p "$SSH_DIR"
  mkdir -p "$KEYS_DIR"
  mkdir -p /etc/sysctl.d  # Create sysctl.d directory
  chmod 700 "$SSH_DIR"
  chmod 700 "<span class="math-inline">KEYS\_DIR"
log "</span>{GREEN}" "Directories created successfully!"
}

# --- Detect Subnet ---
detect_subnet() {
  log "<span class="math-inline">\{BLUE\}" "Step 2/9\: Detecting network subnet\.\.\."
show\_progress 1
\# Try to detect the local subnet \(improved logic\)
local ip\_cmd\_output
local gateway
local subnet
ip\_cmd\_output\=</span>(ip route | grep default)
  if [ -n "<span class="math-inline">ip\_cmd\_output" \]; then
gateway\=</span>(echo "<span class="math-inline">ip\_cmd\_output" \| grep \-oE 'via \[0\-9\.\]\+' \| cut \-d' ' \-f2\)
local device\=</span>(echo "$ip_cmd_output" | grep -oE 'dev [^ ]+' | cut -d' ' -f2)

    if [ -n "<span class="math-inline">device" \]; then
subnet\=</span>(ip route | grep "src" | grep "$device" | grep -v "default" | head -n1 | grep -oE '[0-9.]+/[0-9]+' | head -n1)
    fi
  fi

  if [ -z "<span class="math-inline">subnet" \]; then
subnet\=</span>(ip addr | grep -E "inet .* brd .* scope global" | head -n1 | awk '{print $2}' | grep -oE '[0-9.]+/[0-9]+')
  fi

  if [ -n "<span class="math-inline">subnet" \]; then
log "</span>{GREEN}" "✅ Detected: <span class="math-inline">subnet"
echo \-e "</span>{YELLOW}Note: Only one device can advertise this subnet${NC}"

    if [ -z "$ADVERTISE_ROUTES" ] && [ "$AUTO_CONNECT" != "true" ]; then # Simplified check
      echo -ne "Would you like to advertise this subnet? (yes/no): "
      read -r advertise_answer
      if [[ "<span class="math-inline">advertise\_answer" \=\~ ^\[Yy\]\[Ee\]\[Ss\]</span> ]]; then
        ADVERTISE_ROUTES="<span class="math-inline">subnet"
log "</span>{GREEN}" "✅ Will advertise subnet: <span class="math-inline">subnet"
else
log "</span>{YELLOW}" "Not advertising subnet"
      fi
    fi
  else
    log "${YELLOW}" "Could not detect subnet automatically"
  fi
  [ -z "$ADVERTISE_ROUTES" ] && ADVERTISE_ROUTES="$subnet"  # Default if not set
}

# --- Set Hostname ---
setup_hostname() {
  if [ "$HOSTNAME" == "batocera-pi" ] && [ "$AUTO_CONNECT" != "true" ]; then # Simplified check
    echo -ne "Enter a hostname (default: $HOSTNAME): "
    read -r new_hostname
    if [ -n "$new_hostname" ]; then
      HOSTNAME="<span class="math-inline">new\_hostname"
fi
fi
log "</span>{GREEN}" "✅ Using hostname: $HOSTNAME"

  if [ -z "$TAG" ] && [ "$AUTO_CONNECT" != "true" ]; then  #Simplified Check
    echo -ne "Enter Tailscale tag (optional, press Enter to skip or use default '$DEFAULT_TAG'): "
    read -r new_tag
    if [ -n "$new_tag" ]; then
      TAG="<span class="math-inline">new\_tag"
log "</span>{GREEN}" "✅ Using tag: $TAG"
    else
      TAG="<span class="math-inline">DEFAULT\_TAG"
log "</span>{GREEN}" "✅ Using default tag: $TAG"
    fi
  elif [ -n "<span class="math-inline">TAG" \]; then
log "</span>{GREEN}" "✅ Using tag: $TAG"
  fi
}


# --- Setup Authkey (Prompt if not provided) ---
setup_authkey() {
  if [ -z "<span class="math-inline">AUTHKEY" \]; then
log "</span>{YELLOW}" "🔑 Please generate a Tailscale REUSABLE and EPHEMERAL auth key:"
    log "<span class="math-inline">\{YELLOW\}" "   Go to\: https\://login\.tailscale\.com/admin/settings/keys"
log "</span>{YELLOW}" "   - Reusable: ENABLED"
    log "${YELLOW}" "   - Ephemeral: ENABLED"
    echo -ne "Enter Tailscale auth key (tskey-auth-...): "
    read -r AUTHKEY
  fi

  if [ -z "$AUTHKEY" ] || ! echo "<span class="math-inline">AUTHKEY" \| grep \-q '^tskey\-auth\-'; then
log "</span>{RED}" "❌ Invalid or missing auth key. Exiting."
    exit 1
  fi

  log "<span class="math-inline">\{GREEN\}" "✅ Auth key set"
\}
\# \-\-\- Generate SSH Keys \(Corrected\) \-\-\-
setup\_ssh\_keys\(\) \{
log "</span>{BLUE}" "Step 3/9: Setting up SSH keys..."

  log "${YELLOW}" "Generating SSH key pair with dropbearkey..."
  show_progress 1

  if [ -f "<span class="math-inline">SSH\_DIR/id\_dropbear" \]; then
log "</span>{YELLOW}" "Existing Dropbear key found, backing up..."
    cp "$SSH_DIR/id_dropbear" "$SSH_DIR/id_dropbear.bak"
  fi

  dropbearkey -t ed25519 -f "<span class="math-inline">SSH\_DIR/id\_dropbear" 2\>/dev/null \|\| \{
log "</span>{RED}" "Failed to generate ED25519 key, trying RSA..."
    dropbearkey -t rsa -s 4096 -f "<span class="math-inline">SSH\_DIR/id\_dropbear" 2\>/dev/null \|\| \{
log "</span>{RED}" "Failed to generate SSH keys. Exiting."
      exit 1
    }
  }

  chmod 600 "$SSH_DIR/id_dropbear"

  # Correctly APPEND the PUBLIC key to authorized_keys
  dropbearkey -y -f "$SSH_DIR/id_dropbear" | grep "^ssh-" >> "$SSH_DIR/authorized_keys"
  chmod 600 "<span class="math-inline">SSH\_DIR/authorized\_keys"
log "</span>{GREEN}" "✅ SSH key pair generated"
  log "${GREEN}" "✅ Public key added to authorized_keys—key auth enabled on reboot"

  # Convert and save the key (correctly)
  convert_and_save_key
}

# --- Convert and Save Key (Corrected) ---
convert_and_save_key() {
  local openssh_key="$KEYS_DIR/id_ed25519" # Corrected: No .pub here
  local instructions_file="<span class="math-inline">KEYS\_DIR/SSH\_INSTRUCTIONS\.txt"
log "</span>{CYAN}" "Converting Dropbear key to OpenSSH format for PuTTY..."

  # Correctly use dropbearconvert
  if dropbearconvert dropbear openssh "$SSH_DIR/id_dropbear" "$openssh_key" 2>/dev/null
