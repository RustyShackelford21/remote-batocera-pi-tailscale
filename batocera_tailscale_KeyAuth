#!/bin/bash
#
# Improved Tailscale Installation with SSH Key Authentication for Batocera Linux
# Version: 1.0.16-KeyAuth - Fixed TUN, Sysctl, and Sleep
#

# --- Colors ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# --- Log Function ---
log() {
  local color=$1
  local message=$2
  echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] $message${NC}" | tee -a /userdata/system/logs/tailscale_sshkey_setup.log
}

# --- Progress Bar ---
show_progress() {
  local duration=$1
  local total_steps=20
  local sleep_time=0.05  # Static value, avoids bc/awk dependency
  echo -ne "${CYAN}["
  for ((i=0; i<$total_steps; i++)); do
    sleep $sleep_time
    echo -ne "#"
  done
  echo -e "]${NC}"
}

# --- Directories ---
create_dirs() {
  mkdir -p /userdata/system/logs
  mkdir -p /userdata/system/.ssh
  mkdir -p "/userdata/system/tailscale/keys"
  chmod 700 /userdata/system/.ssh
  chmod 700 /userdata/system/tailscale/keys
}

# --- Permissions Check ---
check_permissions() {
  if [ ! -w "/userdata/system" ]; then
    log "${RED}" "Insufficient permissions to write to /userdata/system"
    exit 1
  fi
}

# --- Start ---
clear
create_dirs
check_permissions
echo -e "${PURPLE}=========================================================${NC}"
echo -e "${PURPLE}   Tailscale and SSH Key Setup for Batocera Linux        ${NC}"
echo -e "${PURPLE}=========================================================${NC}"
echo ""
log "${BLUE}" "Starting setup process..."

# --- Arguments ---
TAILSCALE_ARGS=""
AUTO_CONNECT=false
AUTHKEY=""
HOSTNAME="batocera-pi"
ADVERTISE_ROUTES=""
ADVERTISE_EXIT_NODE=false
ACCEPT_ROUTES=false
AUTO_REBOOT=false
TAG=""

while [[ "$#" -gt 0 ]]; do
  case $1 in
    --authkey=*) AUTHKEY="${1#*=}"; AUTO_CONNECT=true; shift ;;
    --authkey) AUTHKEY="$2"; AUTO_CONNECT=true; shift 2 ;;
    --hostname=*) HOSTNAME="${1#*=}"; shift ;;
    --hostname) HOSTNAME="$2"; shift 2 ;;
    --advertise-routes=*) ADVERTISE_ROUTES="${1#*=}"; shift ;;
    --advertise-routes) ADVERTISE_ROUTES="$2"; shift 2 ;;
    --exit-node) ADVERTISE_EXIT_NODE=true; shift ;;
    --accept-routes) ACCEPT_ROUTES=true; shift ;;
    --auto-reboot) AUTO_REBOOT=true; shift ;;
    --tag=*) TAG="${1#*=}"; shift ;;
    --tag) TAG="$2"; shift 2 ;;
    --help)
      echo -e "${GREEN}Usage: $0 [OPTIONS]${NC}"
      echo "Options:"
      echo "  --authkey=KEY            Tailscale auth key"
      echo "  --hostname=NAME          Hostname (default: batocera-pi)"
      echo "  --advertise-routes=SUBNET Subnet routes (e.g., 192.168.1.0/24)"
      echo "  --exit-node             Advertise as exit node"
      echo "  --accept-routes         Accept subnet routes"
      echo "  --auto-reboot           Reboot after install"
      echo "  --tag=TAG               Tailscale tag"
      exit 0
      ;;
    *) log "${RED}" "Unknown parameter: $1"; exit 1 ;;
  esac
done

# --- Variables ---
TEMP_DIR="/tmp/tailscale_install"
INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="/userdata/system/tailscale/keys"
TAILSCALE_DONE_FILE="/userdata/system/tailscale/.installed"
DROPBEAR_DIR="/etc/dropbear"
ARCH=$(uname -m)
VERSION="1.80.2"

# --- Tailscale URL ---
if [[ "$ARCH" == "aarch64" ]]; then
  TAILSCALE_URL="https://pkgs.tailscale.com/stable/tailscale_${VERSION}_arm64.tgz"
elif [[ "$ARCH" == "armv7l" ]]; then
  TAILSCALE_URL="https://pkgs.tailscale.com/stable/tailscale_${VERSION}_arm.tgz"
else
  log "${RED}" "Unsupported architecture: $ARCH"
  exit 1
fi

# --- Check Prerequisites ---
check_prerequisites() {
  log "${BLUE}" "Checking prerequisites..."
  if ! command -v curl &> /dev/null; then
    log "${RED}" "Error: curl requiredâ€”not found"
    exit 1
  fi
  if ! command -v dropbear &> /dev/null || ! command -v dropbearkey &> /dev/null; then
    log "${RED}" "Error: dropbear or dropbearkey missing"
    exit 1
  fi
  log "${GREEN}" "Prerequisites OK!"
}

# --- Detect Subnet ---
detect_subnet() {
  log "${BLUE}" "Step 2/9: Detecting network subnet..."
  show_progress 1
  GATEWAY_IP=$(ip route show default | awk '/default/ {print $3}')
  if [[ -z "$GATEWAY_IP" ]]; then
    log "${YELLOW}" "WARNING: Could not detect subnet"
    read -r -p "Enter subnet (e.g., 192.168.1.0/24): " SUBNET
  else
    SUBNET=$(echo "$GATEWAY_IP" | awk -F. '{print $1"."$2"."$3".0/24"}')
    log "${GREEN}" "âœ… Detected: $SUBNET"
    echo -e "${YELLOW}Note: Only one device can advertise this subnet${NC}"
    if [ -z "$ADVERTISE_ROUTES" ] && [ "$AUTO_CONNECT" != "true" ]; then
      read -r -p "Advertise this subnet? (yes/no): " advertise_answer
      [[ "$advertise_answer" =~ ^[Yy][Ee][Ss]$ ]] && ADVERTISE_ROUTES="$SUBNET"
    fi
  fi
  [ -z "$ADVERTISE_ROUTES" ] && ADVERTISE_ROUTES="$SUBNET"
}

# --- Setup Hostname ---
setup_hostname() {
  if [ "$HOSTNAME" == "batocera-pi" ] && [ "$AUTO_CONNECT" != "true" ]; then
    read -r -p "Enter a hostname (default: $HOSTNAME): " new_hostname
    [ -n "$new_hostname" ] && HOSTNAME="$new_hostname"
  fi
  log "${GREEN}" "âœ… Using hostname: $HOSTNAME"
  if [ -z "$TAG" ] && [ "$AUTO_CONNECT" != "true" ]; then
    read -r -p "Enter Tailscale tag (optional, Enter to skip): " new_tag
    [ -n "$new_tag" ] && TAG="$new_tag"
  fi
  [ -n "$TAG" ] && log "${GREEN}" "âœ… Using tag: $TAG"
}

# --- Setup Authkey ---
setup_authkey() {
  if [ -z "$AUTHKEY" ]; then
    log "${YELLOW}" "ðŸ”‘ Generate a key at https://login.tailscale.com/admin/settings/keys"
    read -r -p "Enter Tailscale auth key (tskey-auth-...): " AUTHKEY
    [ -z "$AUTHKEY" ] && { log "${RED}" "No auth keyâ€”exiting"; exit 1; }
  fi
  log "${GREEN}" "âœ… Auth key set"
}

# --- SSH Keys ---
setup_ssh_keys() {
  log "${BLUE}" "Step 3/9: Setting up SSH keys..."
  show_progress 1
  if [ -f "$SSH_DIR/id_dropbear" ]; then
    log "${YELLOW}" "Backing up existing key..."
    cp "$SSH_DIR/id_dropbear" "$SSH_DIR/id_dropbear.bak"
  fi
  dropbearkey -t ed25519 -f "$SSH_DIR/id_dropbear" 2>/dev/null || { log "${RED}" "Failed to generate key"; exit 1; }
  chmod 600 "$SSH_DIR/id_dropbear"
  dropbearkey -y -f "$SSH_DIR/id_dropbear" | grep "^ssh-" > "$SSH_DIR/authorized_keys" || { log "${RED}" "Failed to extract public key"; exit 1; }
  chmod 600 "$SSH_DIR/authorized_keys"
  log "${GREEN}" "âœ… SSH key pair generatedâ€”as shown below:"
  dropbearkey -y -f "$SSH_DIR/id_dropbear" || { log "${RED}" "Failed to display key"; exit 1; }
  convert_and_save_key
}

# --- Convert Key ---
convert_and_save_key() {
  local openssh_key="$KEYS_DIR/id_ed25519"
  local openssh_key_pub="$KEYS_DIR/id_ed25519.pub"
  local instructions_file="$KEYS_DIR/SSH_INSTRUCTIONS.txt"
  if command -v dropbearconvert &> /dev/null; then
    log "${CYAN}" "Converting key..."
    dropbearconvert dropbear openssh "$SSH_DIR/id_dropbear" "$openssh_key" 2>/dev/null || log "${YELLOW}" "Conversion failedâ€”manual needed"
    [ -f "$openssh_key" ] && chmod 600 "$openssh_key" && log "${GREEN}" "âœ… Converted to $openssh_key"
    [ -f "$SSH_DIR/authorized_keys" ] && cp "$SSH_DIR/authorized_keys" "$openssh_key_pub" && chmod 644 "$openssh_key_pub"
  else
    log "${YELLOW}" "dropbearconvert not foundâ€”copy raw key"
    cp "$SSH_DIR/id_dropbear" "$KEYS_DIR/id_dropbear.raw"
    chmod 600 "$KEYS_DIR/id_dropbear.raw"
  fi
  log "${GREEN}" "âœ… Public key addedâ€”key auth enabled on reboot"
  create_ssh_instructions "$instructions_file"
}

# --- SSH Instructions ---
create_ssh_instructions() {
  local instructions_file="$1"
  local public_key=$(cat "$SSH_DIR/authorized_keys")
  local tailscale_ip=$("$INSTALL_DIR/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null || echo "<Tailscale-IP>")
  cat > "$instructions_file" << EOF
=======================================================================
               SSH KEY AUTHENTICATION INSTRUCTIONS
=======================================================================

PUBLIC KEY:
$public_key

KEY LOCATIONS:
- Dropbear: /userdata/system/.ssh/id_dropbear
- OpenSSH (if converted): /userdata/system/tailscale/keys/id_ed25519
- Public: /userdata/system/tailscale/keys/id_ed25519.pub
- Raw (if needed): /userdata/system/tailscale/keys/id_dropbear.raw

WINDOWS:
1. Download via WinSCP or SFTP:
   - /userdata/system/tailscale/keys/id_ed25519 (if converted)
   - OR /userdata/system/tailscale/keys/id_dropbear.raw
2. If raw, convert: dropbearconvert dropbear openssh id_dropbear.raw id_ed25519_batocera
3. SSH: ssh -i C:\\Users\\YourUsername\\.ssh\\id_ed25519_batocera root@$tailscale_ip

LINUX/MAC:
1. scp root@192.168.50.5:/userdata/system/tailscale/keys/id_ed25519 ~/.ssh/batocera_key
   # OR if raw: scp root@192.168.50.5:/userdata/system/tailscale/keys/id_dropbear.raw ~/.ssh/id_dropbear.raw
   # Convert: dropbearconvert dropbear openssh id_dropbear.raw batocera_key
2. chmod 600 ~/.ssh/batocera_key
3. ssh -i ~/.ssh/batocera_key root@$tailscale_ip

NOTE: Password auth disabled post-rebootâ€”copy key first!
=======================================================================
EOF
  chmod 644 "$instructions_file"
  log "${GREEN}" "âœ… Instructions at $instructions_file"
}

# --- Download Tailscale ---
download_tailscale() {
  log "${BLUE}" "Step 4/9: Downloading Tailscale v${VERSION}..."
  curl -fsSL "$TAILSCALE_URL" -o "$TEMP_DIR/tailscale.tgz" || { log "${RED}" "Download failed"; exit 1; }
  log "${GREEN}" "âœ… Downloaded!"
}

# --- Install Tailscale ---
install_tailscale() {
  log "${BLUE}" "Step 5/9: Installing Tailscale..."
  tar -xzf "$TEMP_DIR/tailscale.tgz" -C "$TEMP_DIR" || { log "${RED}" "Extract failed"; exit 1; }
  cp -a "$TEMP_DIR"/tailscale_${VERSION}_*/tailscale "$INSTALL_DIR/"
  cp -a "$TEMP_DIR"/tailscale_${VERSION}_*/tailscaled "$INSTALL_DIR/"
  chmod +x "$INSTALL_DIR/tailscale" "$INSTALL_DIR/tailscaled"
  log "${GREEN}" "âœ… Installed!"
}

# --- Configure Network ---
configure_network() {
  log "${BLUE}" "Step 6/9: Configuring network..."
  show_progress 1
  if [ -n "$ADVERTISE_ROUTES" ] || [ "$ADVERTISE_EXIT_NODE" = true ]; then
    touch /etc/sysctl.conf
    mount -o remount,rw /
    grep -q "net.ipv4.ip_forward = 1" /etc/sysctl.conf || echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
    grep -q "net.ipv6.conf.all.forwarding = 1" /etc/sysctl.conf || echo "net.ipv6.conf.all.forwarding = 1" >> /etc/sysctl.conf
    sysctl -p /etc/sysctl.conf || true
    mount -o remount,ro /
    log "${GREEN}" "âœ… IP forwarding enabled"
  fi
  # Ensure TUN module
  mount -o remount,rw /boot
  grep -q "^modules-load=tun$" /boot/batocera-boot.conf || echo "modules-load=tun" >> /boot/batocera-boot.conf
  mount -o remount,ro /boot
  modprobe tun || { log "${RED}" "Failed to load tun module"; exit 1; }
  mkdir -p /dev/net
  [ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 666 /dev/net/tun
}

# --- Configure Persistence ---
configure_persistence() {
  log "${BLUE}" "Step 7/9: Configuring persistence..."
  cat > "$INSTALL_DIR/start_tailscale.sh" << EOF
#!/bin/sh
INSTALL_DIR="$INSTALL_DIR"
SSH_DIR="$SSH_DIR"
DROPBEAR_DIR="$DROPBEAR_DIR"
mkdir -p "\$DROPBEAR_DIR"
[ -f "\$SSH_DIR/authorized_keys" ] && ln -sf "\$SSH_DIR/authorized_keys" "\$DROPBEAR_DIR/authorized_keys" && chmod 700 "\$DROPBEAR_DIR" && chmod 600 "\$DROPBEAR_DIR/authorized_keys"
pkill dropbear 2>/dev/null
dropbear -s &>/dev/null &
sleep 1
pgrep dropbear || { echo "Dropbear failed" >> /userdata/system/logs/tailscale_sshkey_setup.log; exit 1; }
modprobe tun
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 666 /dev/net/tun
"\$INSTALL_DIR/tailscaled" --state="\$INSTALL_DIR/state/tailscaled.state" --socket="\$INSTALL_DIR/tailscaled.sock" &
sleep 5
pgrep -f tailscaled || { echo "tailscaled failed" >> /userdata/system/logs/tailscale_sshkey_setup.log; exit 1; }
"\$INSTALL_DIR/tailscale" --socket="\$INSTALL_DIR/tailscaled.sock" up --ssh --reset
EOF
  chmod +x "$INSTALL_DIR/start_tailscale.sh"
  if [ -f /userdata/system/custom.sh ]; then
    cp /userdata/system/custom.sh /userdata/system/custom.sh.bak
    log "${YELLOW}" "Backed up custom.sh"
  else
    echo "#!/bin/sh" > /userdata/system/custom.sh
    chmod +x /userdata/system/custom.sh
  fi
  if [ -s /userdata/system/custom.sh ] && [ "$(tail -c 1 /userdata/system/custom.sh | wc -l)" -eq 0 ]; then
    echo "" >> /userdata/system/custom.sh
  fi
  if ! grep -q "start_tailscale.sh" /userdata/system/custom.sh; then
    echo "# Start Tailscale" >> /userdata/system/custom.sh
    echo "$INSTALL_DIR/start_tailscale.sh &" >> /userdata/system/custom.sh
  fi
  log "${GREEN}" "âœ… Persistence configured!"
}

# --- Start Tailscale ---
start_tailscale() {
  log "${BLUE}" "Step 8/9: Starting Tailscale..."
  pkill tailscaled 2>/dev/null
  "$INSTALL_DIR/tailscaled" --state="$INSTALL_DIR/state/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" &
  sleep 3
  local tailscaled_pid=$(pgrep tailscaled)
  [ -z "$tailscaled_pid" ] && { log "${RED}" "tailscaled failed"; exit 1; }
  log "${GREEN}" "âœ… tailscaled started (PID: $tailscaled_pid)"
  local ts_cmd="$INSTALL_DIR/tailscale --socket=\"$INSTALL_DIR/tailscaled.sock\" up --hostname=\"$HOSTNAME\" --ssh"
  [ -n "$TAG" ] && ts_cmd="$ts_cmd --advertise-tags=\"$TAG\""
  [ -n "$ADVERTISE_ROUTES" ] && ts_cmd="$ts_cmd --advertise-routes=\"$ADVERTISE_ROUTES\""
  [ "$ADVERTISE_EXIT_NODE" = true ] && ts_cmd="$ts_cmd --advertise-exit-node"
  [ "$ACCEPT_ROUTES" = true ] && ts_cmd="$ts_cmd --accept-routes"
  [ -n "$AUTHKEY" ] && ts_cmd="$ts_cmd --authkey=\"$AUTHKEY\""
  eval "$ts_cmd" || { log "${RED}" "Tailscale up failed"; exit 1; }
  sleep 5
  if ! pgrep tailscaled > /dev/null; then
    log "${YELLOW}" "WARNING: tailscaled stoppedâ€”restarting..."
    "$INSTALL_DIR/tailscaled" --state="$INSTALL_DIR/state/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" &
    sleep 5
    pgrep tailscaled || { log "${RED}" "tailscaled restart failed"; exit 1; }
    eval "$ts_cmd" || { log "${RED}" "Tailscale up failed after restart"; exit 1; }
    log "${GREEN}" "âœ… tailscaled restarted"
  fi
  "$INSTALL_DIR/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" status &>/dev/null || { log "${RED}" "Tailscale not up"; exit 1; }
  log "${GREEN}" "âœ… Tailscale up executed"
  touch "$TAILSCALE_DONE_FILE"
}

# --- Cleanup ---
cleanup() {
  log "${BLUE}" "Step 9/9: Cleaning up..."
  rm -rf "$TEMP_DIR"
  log "${GREEN}" "âœ… Cleanup completed!"
}

# --- Verify ---
verify_installation() {
  log "${BLUE}" "Verifying installation..."
  show_progress 1
  local errors=0
  local tailscale_ip=$("$INSTALL_DIR/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null)
  [ ! -f "$INSTALL_DIR/tailscale" ] || [ ! -f "$INSTALL_DIR/tailscaled" ] && { log "${RED}" "Binaries missing"; errors=$((errors+1)); }
  pgrep tailscaled > /dev/null || { log "${RED}" "tailscaled not running"; errors=$((errors+1)); }
  [ -z "$tailscale_ip" ] && { log "${RED}" "No Tailscale IP"; errors=$((errors+1)); } || log "${GREEN}" "Tailscale at $tailscale_ip"
  [ ! -f "$SSH_DIR/authorized_keys" ] && { log "${RED}" "authorized_keys missing"; errors=$((errors+1)); }
  [ $errors -eq 0 ] && log "${GREEN}" "âœ… Verification OK" || log "${RED}" "$errors issues found"
  return $errors
}

# --- Show Info ---
show_info() {
  local tailscale_ip=$("$INSTALL_DIR/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null || echo "<Tailscale-IP>")
  local openssh_key="$KEYS_DIR/id_ed25519"
  echo -e "${PURPLE}=========================================================${NC}"
  echo -e "${PURPLE}          Tailscale & SSH Key Setup Complete!           ${NC}"
  echo -e "${PURPLE}=========================================================${NC}"
  echo -e "${CYAN}Tailscale IP:${NC} $tailscale_ip"
  echo -e "\n${CYAN}SSH INFO:${NC}"
  [ -f "$openssh_key" ] && echo -e "${GREEN}Key: $openssh_key${NC}" || echo -e "${YELLOW}Raw key: $KEYS_DIR/id_dropbear.raw${NC}"
  echo -e "\n${CYAN}NEXT STEPS:${NC}"
  echo -e "1. ${GREEN}Copy key${NC} (see $KEYS_DIR/SSH_INSTRUCTIONS.txt)"
  echo -e "2. ${GREEN}Reboot${NC} for key-only auth"
  echo -e "3. ${GREEN}SSH:${NC} ssh -i C:\\Users\\YourUsername\\.ssh\\id_ed25519_batocera root@$tailscale_ip"
  echo -e "\n${YELLOW}WARNING: Password auth disabled post-rebootâ€”copy key first!${NC}"
  if [ "$AUTO_REBOOT" = false ]; then
    read -r -p "Reboot now? (yes/no): " reboot_answer
    [[ "$reboot_answer" =~ ^[Yy][Ee][Ss]$ ]] && { echo -e "${YELLOW}Rebooting...${NC}"; sleep 2; reboot; }
  else
    echo -e "${YELLOW}Auto-reboot in 10 seconds...${NC}"
    sleep 10
    reboot
  fi
}

# --- Main Execution ---
check_prerequisites
create_directories
detect_subnet
setup_hostname
setup_authkey
setup_ssh_keys
download_tailscale
install_tailscale
configure_network
configure_persistence
start_tailscale
cleanup
verify_installation
show_info