#!/bin/bash
# Ultimate SSH Key & Tailscale Setup for Batocera
# Version: 12.23 - Refined SCP, Config Emphasis, Pre-Reboot Test
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

log() {
    echo -e "${1}[$(date '+%Y-%m-%d %H:%M:%S')] ${2}${NC} ${MAGENTA}‚ö°${NC}"
}

TAILSCALE_VERSION="1.80.2"
INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="$INSTALL_DIR/keys"
LOCAL_SSH_PORT="22"

banner() {
    local text="$1"
    local width=60
    local border=$(printf "%${width}s" '' | tr ' ' '=')
    echo -e "${BLUE}${border}${NC}"
    printf "${MAGENTA}%${width}s\n${NC}" "$text" | tr ' ' '.'
    echo -e "${BLUE}${border}${NC}"
}

progress_indicator() {
    local duration=$1
    local message="$2"
    local spin=('‚†ã' '‚†ô' '‚†π' '‚†∏' '‚†º' '‚†¥' '‚†¶' '‚†ß' '‚†á' '‚†è')
    local i=0
    echo -ne "${CYAN}${message}...${NC} "
    for ((t=0; t<duration*10; t++)); do
        printf "\b${spin[i]}"
        i=$(( (i+1) % 10 ))
        sleep 0.1
    done
    echo -e "\b${GREEN}‚úì${NC}"
}

clear
banner "Batocera Tailscale & SSH Key Setup (v12.23)"
echo -e "${CYAN}Sets up Tailscale and SSH key auth on Batocera.${NC}"

[ "$(id -u)" -ne 0 ] && { log "$RED" "ERROR: Run as root."; exit 1; }

log "$BLUE" "Ensuring TUN device..."
progress_indicator 2 "Initializing TUN"
modprobe tun >/dev/null 2>&1
mkdir -p /dev/net >/dev/null 2>&1
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun >/dev/null 2>&1

echo
log "$YELLOW" "Let's get some info..."
read -rp "Tailscale auth key (https://login.tailscale.com/admin/settings/keys): " AUTH_KEY
[[ -z "$AUTH_KEY" ]] && { log "$RED" "ERROR: Auth key required."; exit 1; }
[[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid auth key."; exit 1; }
DEFAULT_HOSTNAME=$(hostname | cut -d'.' -f1)
read -rp "Hostname (default: $DEFAULT_HOSTNAME): " USER_HOSTNAME
HOSTNAME="${USER_HOSTNAME:-$DEFAULT_HOSTNAME}"
DEFAULT_TAG="tag:ssh-batocera"
read -rp "Use default tag '$DEFAULT_TAG'? (yes/no): " TAG_CONFIRM
if [[ "$TAG_CONFIRM" =~ ^[Yy]es$ ]]; then
    TAG="$DEFAULT_TAG"
else
    read -rp "Custom Tailscale tag: " TAG
    [[ -z "$TAG" ]] && { log "$RED" "ERROR: Tag required."; exit 1; }
fi
log "$GREEN" "‚úÖ Hostname: $HOSTNAME"
log "$GREEN" "‚úÖ Tag: $TAG"

LOCAL_IP=$(ip -4 addr show | grep -oE "inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | awk '{print $2}' | grep -v "127.0.0.1" | head -n 1)
[[ -z "$LOCAL_IP" ]] && { log "$RED" "ERROR: Local IP not found."; LOCAL_IP="<LOCAL_IP>"; } || log "$BLUE" "Local IP: $LOCAL_IP"

mkdir -p "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
chmod 700 "$SSH_DIR" "$KEYS_DIR" /etc/dropbear

DROPBEAR_KEY="$SSH_DIR/id_dropbear"
OPENSSH_KEY="$KEYS_DIR/id_ed25519_batocera"
if [ ! -f "$DROPBEAR_KEY" ]; then
    log "$GREEN" "üîë Generating SSH key..."
    progress_indicator 3 "Forging key"
    dropbearkey -t ed25519 -f "$DROPBEAR_KEY" || { log "$RED" "Key gen failed"; exit 1; }
    chmod 600 "$DROPBEAR_KEY"
    dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { log "$RED" "Pubkey failed"; exit 1; }
    chmod 600 /etc/dropbear/authorized_keys
else
    log "$YELLOW" "‚ö†Ô∏è Reusing key."
    dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { log "$RED" "Pubkey failed"; exit 1; }
    chmod 600 /etc/dropbear/authorized_keys
fi
dropbearconvert dropbear openssh "$DROPBEAR_KEY" "$OPENSSH_KEY" || { log "$RED" "Key conversion failed"; exit 1; }
chmod 600 "$OPENSSH_KEY"

log "$BLUE" "Configuring Dropbear..."
DROPBEAR_CONF="/etc/dropbear/dropbear.conf"
touch "$DROPBEAR_CONF"
[[ ! -w "$DROPBEAR_CONF" ]] && { log "$RED" "ERROR: Cannot write $DROPBEAR_CONF"; exit 1; }
sed -i '/^PasswordAuth/d' "$DROPBEAR_CONF" 2>/dev/null || true

log "$BLUE" "Saving overlay..."
progress_indicator 2 "Saving overlay"
batocera-save-overlay || { log "$RED" "Overlay failed"; exit 1; }

log "$BLUE" "Installing Tailscale..."
progress_indicator 5 "Downloading Tailscale"
mkdir -p "$INSTALL_DIR/bin"
wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "$RED" "Download failed."; exit 1; }
tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 || { log "$RED" "Extraction failed."; exit 1; }
rm "$INSTALL_DIR/tailscale.tgz"
chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled"

log "$BLUE" "Starting Tailscale..."
progress_indicator 3 "Starting Tailscale"
pkill -f "tailscaled" || true
mkdir -p /var/run/tailscale
ln -sf "$INSTALL_DIR/tailscaled.sock" /var/run/tailscale/tailscaled.sock
"$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
sleep 10
"$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" up --authkey="$AUTH_KEY" --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes > /tmp/tailscaled.log 2>&1 || { log "$RED" "Tailscale failed:"; cat /tmp/tailscaled.log; exit 1; }
sleep 5

log "$BLUE" "Waiting for Tailscale IP..."
TRIES=0
TAILSCALE_IP=""
while [[ -z "$TAILSCALE_IP" && $TRIES -lt 10 ]]; do
    sleep 3
    TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null)
    ((TRIES++))
done
[[ -z "$TAILSCALE_IP" ]] && { log "$YELLOW" "‚ö†Ô∏è No Tailscale IP."; TAILSCALE_IP="$LOCAL_IP"; } || log "$GREEN" "‚úÖ Tailscale IP: $TAILSCALE_IP"

banner "Key Download and Testing"
echo -e "${CYAN}Download and test your SSH key‚Äîfollow these steps EXACTLY:${NC}"
log "$YELLOW" "1. Open a NEW terminal (PowerShell: Win + T, 'powershell'; Linux/macOS: any terminal):"
log "$BLUE" "Starting Dropbear on 2222 (password mode)..."
pkill -f "dropbear.*2222" || true
/usr/sbin/dropbear -p 2222 || { log "$RED" "Dropbear failed on 2222."; exit 1; }
sleep 5
log "$YELLOW" "2. Download the SSH key‚Äîcopy-paste this in your new terminal:"
echo "scp -P 2222 root@$LOCAL_IP:/userdata/system/tailscale/keys/id_ed25519_batocera \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_batocera\""
log "$CYAN" "   - Windows: Auto-detects username."
log "$CYAN" "   - Password: 'linux' (type it when prompted)."
log "$CYAN" "   - Manual alternative: scp -P 2222 root@$LOCAL_IP:/userdata/system/tailscale/keys/id_ed25519_batocera C:\\Users\\<YourUsername>\\.ssh\\id_ed25519_batocera"
log "$CYAN" "   - Linux/macOS: scp -P 2222 root@$LOCAL_IP:/userdata/system/tailscale/keys/id_ed25519_batocera ~/.ssh/id_ed25519_batocera"
log "$YELLOW" "3. Fix key permissions (Windows only‚Äîcopy-paste this):"
echo "icacls \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_batocera\" /inheritance:r /grant:r \"\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME'):F\""
log "$YELLOW" "4. Set up SSH config‚ÄîREQUIRED for easy access (create/edit C:\\Users\\<YourUsername>\\.ssh\\config):"
echo "Host batocera-tailscale $TAILSCALE_IP"
echo "    HostName $TAILSCALE_IP"
echo "    User root"
echo "    IdentityFile C:\\Users\\<YourUsername>\\\.ssh\\id_ed25519_batocera"
log "$CYAN" "   - Replace <YourUsername> with your username (e.g., 'Willi')."
log "$CYAN" "   - Linux/macOS: Use ~/.ssh/ instead of C:\\Users\\<YourUsername>\\.ssh\\"
log "$CYAN" "   - IMPORTANT: This lets you run 'ssh batocera-tailscale' or 'ssh root@$TAILSCALE_IP' without extra flags."
log "$CYAN" "   - Steps: Open notepad, paste the above (replace <YourUsername>), save as 'config' in ~/.ssh/"
log "$YELLOW" "5. Test SSH‚Äîcopy-paste this in your new terminal:"
echo "ssh -i \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_batocera\" root@$LOCAL_IP -p 2222"
log "$CYAN" "   - Manual: ssh -i C:\\Users\\<YourUsername>\\.ssh\\id_ed25519_batocera root@$LOCAL_IP -p 2222"
log "$CYAN" "   - Linux/macOS: ssh -i ~/.ssh/id_ed25519_batocera root@$LOCAL_IP -p 2222"
log "$CYAN" "   - NOTE: If using local IP and Tailscale runs on your PC, exit Tailscale first."
log "$YELLOW" "6. If you see 'root@BATOCERA', type 'yes' below:"
read -rp "Did SSH work on 2222? (yes/no): " KEY_WORKS

if [[ "$KEY_WORKS" =~ ^[Yy]es$ ]]; then
    log "$GREEN" "‚úÖ Key confirmed!"
    echo "PasswordAuth no" > /etc/dropbear/dropbear.conf
    log "$BLUE" "Locking to key auth on 22..."
    progress_indicator 2 "Locking SSH"
    if ! pgrep -f "dropbear.*-p 22" > /dev/null; then
        pkill -f "dropbear" || true
        sleep 1
        /usr/sbin/dropbear -s -p 22 || { log "$RED" "Dropbear failed!"; /usr/sbin/dropbear -p 22 || exit 1; }
    fi
else
    log "$RED" "‚ùå Key failed‚Äîtroubleshoot."
    pkill -f "dropbear.*2222" || true
    exit 1
fi

log "$YELLOW" "Final test‚Äîconfirm SSH works before reboot:"
echo "ssh -i \"C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_batocera\" root@$LOCAL_IP"
log "$CYAN" "   - Manual: ssh -i C:\\Users\\<YourUsername>\\.ssh\\id_ed25519_batocera root@$LOCAL_IP"
log "$CYAN" "   - Linux/macOS: ssh -i ~/.ssh/id_ed25519_batocera root@$LOCAL_IP"
log "$CYAN" "   - With config: ssh batocera-tailscale OR ssh root@$TAILSCALE_IP"
read -rp "Did SSH work? (yes/no): " SSH_WORKS
[[ "$SSH_WORKS" =~ ^[Nn]o$ ]] && { log "$RED" "‚ùå SSH failed‚Äîreboot canceled."; exit 1; }

log "$BLUE" "Setting persistence..."
progress_indicator 3 "Saving state"
cat > /userdata/system/custom.sh <<EOF
#!/bin/sh
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun
ip link set wlan0 up
iptables -F INPUT
iptables -P INPUT ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
if ! pgrep -f "dropbear.*-p 22" > /dev/null; then
    pkill -f dropbear || true
    sleep 1
    /usr/sbin/dropbear -s -p 22 || echo "Dropbear failed" >> /tmp/custom.log
fi
pkill -f smbd || true
[ -f /userdata/system/configs/smb.conf ] && smbd -D -s /userdata/system/configs/smb.conf
sleep 1
mkdir -p /var/run/tailscale
ln -sf $INSTALL_DIR/tailscaled.sock /var/run/tailscale/tailscaled.sock
if ! pgrep -f "$INSTALL_DIR/bin/tailscaled" > /dev/null; then
    $INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailsenalscaled.state --socket=$INSTALL_DIR/tailscaled.sock --tun=userspace-networking --verbose=1 > /tmp/tailscaled.log 2>&1 &
    sleep 10
    [ -f "$INSTALL_DIR/tailscaled.state" ] && $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes > /tmp/tailscaled.log 2>&1
fi
EOF
chmod +x /userdata/system/custom.sh
[ -f /userdata/system/custom.sh ] || { log "$RED" "ERROR: custom.sh failed"; exit 1; }

log "$BLUE" "Saving overlay..."
batocera-save-overlay && log "$GREEN" "‚úÖ Overlay saved." || { log "$RED" "Overlay failed"; exit 1; }

banner "Installation Complete!"
log "$GREEN" "‚úÖ Setup complete!"
log "$YELLOW" "SSH commands (if config not set):"
echo "ssh -i C:\\Users\\<YourUsername>\\.ssh\\id_ed25519_batocera root@$LOCAL_IP"
echo "ssh -i C:\\Users\\<YourUsername>\\.ssh\\id_ed25519_batocera root@$TAILSCALE_IP"
log "$CYAN" "   - With config (recommended): ssh batocera-tailscale OR ssh root@$TAILSCALE_IP"
log "$CYAN" "   - Optional agent (Windows): powershell.exe -Command \"Set-Service ssh-agent -StartupType Automatic; Start-Service ssh-agent; ssh-add C:\\\\Users\\\\\$(powershell.exe -NoProfile -Command 'Write-Output \$env:USERNAME')\\\\.ssh\\\\id_ed25519_batocera\""
log "$CYAN" "   - Linux/macOS: eval \$(ssh-agent -s); ssh-add ~/.ssh/id_ed25519_batocera"
log "$GREEN" "Rebooting in 5..."
sleep 5
sync
reboot -f || reboot
