#!/bin/bash
# Ultimate SSH Key & Tailscale Setup for Batocera
# Version: 12.10 - Max Flair Edition with Samba Persistence
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

banner() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${YELLOW}  $1${NC} ${PURPLE}✨${NC}"
    echo -e "${BLUE}========================================${NC}"
}

progress() {
    local duration=$1
    local message=$2
    local spin=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    local i=0
    echo -ne "${CYAN}$message ["
    for ((t=0; t<duration*10; t++)); do
        echo -ne "\b${spin[i]}"
        i=$(( (i+1) % 10 ))
        sleep 0.1
    done
    echo -ne "\b${GREEN}✓${NC}]"
    echo -e "${GREEN} Done!${NC}"
}

log() { echo -e "${1}[$(date '+%Y-%m-%d %H:%M:%S')] ${2}${NC} ${PURPLE}⚡${NC}"; }

generate_random_password() { 
    echo -ne "${CYAN}Generating password...${NC}"
    head /dev/urandom | tr -dc 'A-Za-z0-9~!@#$%^&*()-_=+\[\]{};:,<.>/?' | head -c 32
    echo -e "${GREEN} ✓${NC}"
}

TAILSCALE_VERSION="1.80.2"
INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="$INSTALL_DIR/keys"
LOCAL_SSH_PORT="22"

clear
banner "Batocera Tailscale & SSH Setup - Retro Edition"
echo -e "${CYAN}Powering up secure remote access with Tailscale and SSH keys!${NC}"
echo -e "${PURPLE}Ready for a smooth ride? Let’s roll!${NC}"
[ "$(id -u)" -ne 0 ] && { log "$RED" "ERROR: Gotta run as root—use 'sudo bash script.sh'."; exit 1; }

log "$BLUE" "Step 1/5: Prepping the Network Core..."
progress 2 "Initializing TUN device"
modprobe tun >/dev/null 2>&1
mkdir -p /dev/net >/dev/null 2>&1
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun >/dev/null 2>&1
log "$GREEN" "✅ Network core online!"

banner "Step 2/5: Your Mission Details"
echo -e "${CYAN}We need your Tailscale key and a cool name for your Pi.${NC}"
read -rp "Enter your Tailscale auth key (grab it from tailscale.com): " AUTH_KEY
[[ -z "$AUTH_KEY" || ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid key—needs 'tskey-auth-' prefix."; exit 1; }
read -rp "Pick a hostname (hit Enter for 'batocera-pi'): " USER_HOSTNAME
HOSTNAME="${USER_HOSTNAME:-batocera-pi}"
read -rp "Set a Tailscale tag (e.g., 'tag:ssh-batocera-1', required): " TAG
[[ -z "$TAG" ]] && { log "$RED" "ERROR: Tag can’t be blank—try 'tag:ssh-batocera-1'."; exit 1; }
log "$GREEN" "✅ Locked in hostname: $HOSTNAME"
log "$GREEN" "✅ Locked in tag: $TAG"
LOCAL_IP=$(ip -4 addr show | grep -oE "inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | awk '{print $2}' | grep -v "127.0.0.1" | head -n 1)
[[ -z "$LOCAL_IP" ]] && { log "$RED" "ERROR: Can’t find local IP—check your network."; exit 1; }
log "$BLUE" "Local IP detected: $LOCAL_IP"

banner "Step 3/5: Forging Your SSH Key"
echo -e "${CYAN}Crafting a secure key for password-free SSH access...${NC}"
progress 3 "Forging key in the digital forge"
mkdir -p "$SSH_DIR" "$KEYS_DIR" /etc/dropbear >/dev/null 2>&1
chmod 700 "$SSH_DIR" "$KEYS_DIR" /etc/dropbear >/dev/null 2>&1
OPENSSH_KEY="$KEYS_DIR/id_ed25519_batocera"
rm -f "$OPENSSH_KEY" "$OPENSSH_KEY.pub" >/dev/null 2>&1
dropbearkey -t ed25519 -f "$OPENSSH_KEY" >/dev/null 2>&1 || { log "$RED" "ERROR: Key forging failed."; exit 1; }
chmod 600 "$OPENSSH_KEY" >/dev/null 2>&1
dropbearkey -y -f "$OPENSSH_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys 2>/dev/null
chmod 600 /etc/dropbear/authorized_keys >/dev/null 2>&1
dropbearconvert dropbear openssh "$OPENSSH_KEY" "$OPENSSH_KEY.openssh" >/dev/null 2>&1 || { log "$RED" "ERROR: Key conversion glitch."; exit 1; }
mv "$OPENSSH_KEY.openssh" "$OPENSSH_KEY" >/dev/null 2>&1
log "$GREEN" "✅ Key forged at $OPENSSH_KEY"
progress 2 "Securing key in vault"
batocera-save-overlay >/dev/null 2>&1 || { log "$RED" "ERROR: Vault save failed."; exit 1; }
log "$GREEN" "✅ Key vault secured!"

banner "Step 4/5: Launching Tailscale Warp Drive"
echo -e "${CYAN}Installing Tailscale for warp-speed remote access...${NC}"
progress 5 "Beaming Tailscale aboard"
mkdir -p "$INSTALL_DIR/bin" >/dev/null 2>&1
wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "$RED" "ERROR: Warp drive download failed."; exit 1; }
tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 >/dev/null 2>&1 || { log "$RED" "ERROR: Warp core breach during extraction."; exit 1; }
rm "$INSTALL_DIR/tailscale.tgz" >/dev/null 2>&1
chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled" >/dev/null 2>&1
progress 3 "Engaging warp engines"
pkill -f "tailscaled" >/dev/null 2>&1 || true
"$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" --tun=userspace-networking > /tmp/tailscaled.log 2>&1 &
sleep 10
"$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" up --authkey="$AUTH_KEY" --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes > /tmp/tailscaled.log 2>&1 || { log "$RED" "ERROR: Warp jump failed."; exit 1; }
sleep 10
ip route del 192.168.50.0/24 dev tailscale0 table 52 2>/dev/null || true
TRIES=0
TAILSCALE_IP=""
while [[ -z "$TAILSCALE_IP" && $TRIES -lt 10 ]]; do
    sleep 3
    TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null)
    ((TRIES++))
done
[[ -z "$TAILSCALE_IP" ]] && { log "$YELLOW" "⚠️ Warp IP not locked—using local IP."; TAILSCALE_IP="$LOCAL_IP"; } || log "$GREEN" "✅ Warp IP locked: $TAILSCALE_IP"

banner "Step 5/5: SSH Test Chamber"
echo -e "${CYAN}Test your key on a temp port (2222) to secure the system:${NC}"
/usr/sbin/dropbear -p 2222 >/dev/null 2>&1 &
log "$YELLOW" "1. Beam the key to your machine:"
echo -e "${YELLOW}scp root@$LOCAL_IP:$OPENSSH_KEY ~/.ssh/id_ed25519_batocera${NC}  # Password: linux"
echo -e "${CYAN}   - Windows: scp root@$LOCAL_IP:$OPENSSH_KEY C:\\Users\\YourUsername\\.ssh\\id_ed25519_batocera${NC}"
log "$YELLOW" "2. Test your SSH link (new terminal):"
echo -e "${YELLOW}ssh -i ~/.ssh/id_ed25519_batocera root@$LOCAL_IP -p 2222${NC}"
echo -e "${CYAN}   - Windows: ssh -i C:\\Users\\YourUsername\\.ssh\\id_ed25519_batocera root@$LOCAL_IP -p 2222${NC}"
log "$YELLOW" "3. Connected? Type 'yes'. Trouble? Type 'no'."
read -rp "SSH test passed? (yes/no): " KEY_WORKS
if [[ "$KEY_WORKS" =~ ^[Yy]es$ ]]; then
    log "$GREEN" "✅ SSH link established!"
    echo "PasswordAuth no" > /etc/dropbear/dropbear.conf
    NEW_PASS=$(generate_random_password)
    echo "root:$NEW_PASS" | chpasswd >/dev/null 2>&1
    log "$RED" "Password auth zapped! New root pass: $NEW_PASS (save it!)"
    pkill -f "dropbear.*2222" >/dev/null 2>&1 || true
    progress 2 "Locking SSH to port 22"
    pkill -f "dropbear.*22" >/dev/null 2>&1 || true
    /usr/sbin/dropbear -s -p 22 >/dev/null 2>&1 &
else
    log "$RED" "❌ SSH link down—keeping password auth (use 'linux')."
    pkill -f "dropbear.*2222" >/dev/null 2>&1 || true
    exit 1
fi

progress 3 "Saving galaxy state"
cat > /userdata/system/custom.sh <<EOF
#!/bin/sh
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun
ip link set wlan0 up
iptables -F INPUT
iptables -P INPUT ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
pkill -f dropbear || true
sleep 1
/usr/sbin/dropbear -s -p 22
pkill -f smbd || true
[ -f /userdata/system/configs/smb.conf ] && smbd -D -s /userdata/system/configs/smb.conf
sleep 1
if ! pgrep -f "$INSTALL_DIR/bin/tailscaled" > /dev/null; then
    $INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock --tun=userspace-networking > /tmp/tailscaled.log 2>&1 &
    sleep 10
    $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes > /tmp/tailscaled.log 2>&1
    ip route del 192.168.50.0/24 dev tailscale0 table 52 2>/dev/null || true
fi
EOF
chmod +x /userdata/system/custom.sh >/dev/null 2>&1
batocera-save-overlay >/dev/null 2>&1 || { log "$RED" "ERROR: Galaxy save failed."; exit 1; }

banner "Mission Accomplished!"
log "$GREEN" "✅ System online—remote access activated!"
log "$YELLOW" "Warp in after reboot with:"
echo -e "${YELLOW}ssh -i ~/.ssh/id_ed25519_batocera root@$LOCAL_IP${NC}"
echo -e "${YELLOW}ssh -i ~/.ssh/id_ed25519_batocera root@$TAILSCALE_IP${NC}"
echo -e "${CYAN}   - Windows: Use C:\\Users\\YourUsername\\.ssh\\ instead of ~/.ssh/${NC}"
log "$GREEN" "Reboot sequence starting in 5... 4... 3... 2... 1..."
sleep 5
reboot
