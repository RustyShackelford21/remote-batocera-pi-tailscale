#!/bin/bash
#
# Tailscale Installation Script for Batocera Linux on Raspberry Pi
# Version: 1.0.16-KeyAuth - Key-Based SSH with Dropbear, No Restart
# Hybrid with Configurable Hostname, Tag, and Reboot Countdown
#

# --- Color Definitions ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# --- Logging Function ---
log() {
    local color=$1
    local message=$2
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] $message${NC}" | tee -a /userdata/system/tailscale_install.log
}

# --- Progress Bar Function ---
show_progress() {
    local duration=$1
    local steps=10
    local sleep_time=$(echo "$duration/$steps" | bc -l 2>/dev/null || echo "$duration/$steps" | awk '{print $1}')
    echo -ne "${CYAN}["
    for ((i=0; i<$steps; i++)); do
        sleep $sleep_time
        echo -ne "#"
    done
    echo -e "]${NC}"
}

# --- Configuration ---
AUTH_KEY="${1:-}"
TAILSCALE_VERSION="1.80.2"
DEFAULT_TAG="tag:ssh-batocera-1"

# --- Script Start ---
clear
echo -e "${PURPLE}=========================================================${NC}"
echo -e "${PURPLE}    Tailscale Key-Based SSH Installer for Batocera     ${NC}"
echo -e "${PURPLE}=========================================================${NC}"
echo ""
log "${BLUE}" "Starting Tailscale key-based SSH installation..."

# --- Root Check ---
if [ "$(id -u)" -ne 0 ]; then
    log "${RED}" "⚠️ This script must be run as root"
    exit 1
fi

# --- Check for batocera-save-overlay ---
if ! command -v batocera-save-overlay &> /dev/null; then
    log "${RED}" "ERROR: batocera-save-overlay not found"
    exit 1
fi

# --- Parse Command Line Arguments ---
AUTO_CONNECT=false
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --authkey=*) AUTH_KEY="${1#*=}"; AUTO_CONNECT=true; shift ;;
        --authkey) AUTH_KEY="$2"; AUTO_CONNECT=true; shift 2 ;;
        --auto-connect) AUTO_CONNECT=true; shift ;;
        --uninstall)
            log "${YELLOW}" "Uninstalling Tailscale and SSH keys..."
            pkill -f tailscaled 2>/dev/null && log "${GREEN}" "Stopped Tailscale"
            pkill dropbear 2>/dev/null && log "${GREEN}" "Stopped dropbear"
            [ -f /userdata/system/custom.sh ] && sed -i '/tailscale/d' /userdata/system/custom.sh
            rm -rf /userdata/system/tailscale /root/.ssh
            batocera-save-overlay && log "${GREEN}" "Uninstalled—rebooting" || log "${RED}" "Overlay save failed"
            reboot
            exit 0
            ;;
        *) log "${RED}" "Unknown option: $1"; exit 1 ;;
    esac
done

# --- User Confirmation ---
if [ "$AUTO_CONNECT" != "true" ]; then
    read -r -p "Install Tailscale with key-based SSH? Continue? (yes/no): " CONFIRM
    [[ "$CONFIRM" != "yes" ]] && { log "${RED}" "❌ Cancelled"; exit 1; }
fi

# --- Automatic Subnet Detection ---
log "${BLUE}" "Detecting network subnet..."
show_progress 1
GATEWAY_IP=$(ip route show default | awk '/default/ {print $3}')
if [[ -z "$GATEWAY_IP" ]]; then
    log "${YELLOW}" "WARNING: Could not detect subnet"
    read -r -p "Enter subnet (e.g., 192.168.1.0/24): " SUBNET
else
    SUBNET=$(echo "$GATEWAY_IP" | awk -F. '{print $1"."$2"."$3".0/24"}')
    log "${GREEN}" "✅ Detected: $SUBNET"
    echo -e "${YELLOW}Note: Only one device can advertise this subnet${NC}"
    if [ "$AUTO_CONNECT" != "true" ]; then
        read -r -p "Correct? (yes/no): " SUBNET_CONFIRM
        [[ "$SUBNET_CONFIRM" != "yes" ]] && read -r -p "Enter subnet: " SUBNET
    fi
fi
[[ ! "$SUBNET" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]] && { log "${RED}" "Invalid subnet"; exit 1; }

# --- Hostname Prompt ---
unset HOSTNAME
while [[ -z "$HOSTNAME" ]]; do
    read -r -p "Enter a hostname (e.g., batocera-test): " HOSTNAME
    [[ -z "$HOSTNAME" ]] && log "${RED}" "ERROR: Hostname cannot be empty"
done
log "${GREEN}" "✅ Using hostname: $HOSTNAME"

# --- Tag Prompt ---
TAG="$DEFAULT_TAG"
if [ "$AUTO_CONNECT" != "true" ]; then
    read -r -p "Enter Tailscale tag (default: $DEFAULT_TAG, press Enter to accept): " USER_TAG
    [ -n "$USER_TAG" ] && TAG="$USER_TAG"
fi
log "${GREEN}" "✅ Using tag: $TAG"

# --- Check for Auth Key ---
if [[ -z "$AUTH_KEY" ]]; then
    log "${YELLOW}" "🔑 Generate a key at https://login.tailscale.com/admin/settings/keys"
    read -r -p "Enter Tailscale auth key (tskey-auth-...): " AUTH_KEY
fi
[[ -z "$AUTH_KEY" || ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "${RED}" "❌ Invalid key"; exit 1; }

# --- Generate Dropbear SSH Key Pair ---
log "${BLUE}" "Generating SSH key pair with dropbearkey..."
show_progress 1
mkdir -p /root/.ssh
if [ ! -f /root/.ssh/id_dropbear ]; then
    dropbearkey -t ed25519 -f /root/.ssh/id_dropbear > /tmp/dropbear_key_output 2>&1
    dropbearkey -y -f /root/.ssh/id_dropbear | grep "^ssh-" > /root/.ssh/authorized_keys
    log "${GREEN}" "✅ SSH key pair generated"
else
    log "${YELLOW}" "SSH key pair exists—using existing keys"
    dropbearkey -y -f /root/.ssh/id_dropbear | grep "^ssh-" > /root/.ssh/authorized_keys
fi
chmod 600 /root/.ssh/authorized_keys
log "${GREEN}" "✅ Public key added to authorized_keys"
echo -e "${YELLOW}Save this private key (convert to OpenSSH format for PowerShell/Tailscale):${NC}"
dropbearkey -y -f /root/.ssh/id_dropbear

# --- Installation Steps ---
log "${BLUE}" "📥 Installing Tailscale..."
show_progress 2
mkdir -p /userdata/system/tailscale/bin /run/tailscale
wget -O /tmp/tailscale.tgz "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "${RED}" "Download failed"; exit 1; }
gunzip -c /tmp/tailscale.tgz > /tmp/tailscale.tar || { log "${RED}" "Decompress failed"; exit 1; }
tar -xf /tmp/tailscale.tar -C /tmp || { log "${RED}" "Extract failed"; exit 1; }
mv /tmp/tailscale_*_arm64/tailscale /tmp/tailscale_*_arm64/tailscaled /userdata/system/tailscale/bin/ || { log "${RED}" "Move failed"; exit 1; }
rm -rf /tmp/tailscale_* /tmp/tailscale*
chmod +x /userdata/system/tailscale/bin/*

# --- Configure Network ---
log "${BLUE}" "Configuring network..."
show_progress 1
if ! grep -q '^modules-load=tun$' /boot/batocera-boot.conf; then
    mount -o remount,rw /boot || { log "${RED}" "Mount failed"; exit 1; }
    echo 'modules-load=tun' >> /boot/batocera-boot.conf
    mount -o remount,ro /boot
fi
modprobe tun || { log "${RED}" "tun failed"; exit 1; }
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun
touch /etc/sysctl.conf
grep -q "net.ipv4.ip_forward = 1" /etc/sysctl.conf || echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf
grep -q "net.ipv6.conf.all.forwarding = 1" /etc/sysctl.conf || echo 'net.ipv6.conf.all.forwarding = 1' >> /etc/sysctl.conf
sysctl -p || true

# --- Start Tailscale ---
log "${BLUE}" "Starting Tailscale..."
show_progress 2
timeout 30s /userdata/system/tailscale/bin/tailscaled --state=/userdata/system/tailscale/tailscaled.state --socket=/run/tailscale/tailscaled.sock >> /userdata/system/tailscale/boot.log 2>&1 &
sleep 15
pgrep -f tailscaled || { log "${RED}" "tailscaled failed"; cat /userdata/system/tailscale/boot.log; exit 1; }
log "${GREEN}" "✅ tailscaled started"
timeout 30s /userdata/system/tailscale/bin/tailscale up --advertise-routes=$SUBNET --snat-subnet-routes=false --accept-routes --authkey="$AUTH_KEY" --hostname="$HOSTNAME" --advertise-tags="$TAG" >> /userdata/system/tailscale/tailscale_up.log 2>&1 || { log "${RED}" "Tailscale up failed"; cat /userdata/system/tailscale/tailscale_up.log; exit 1; }
log "${GREEN}" "✅ Tailscale up executed"

TAILSCALE_IP=$(/userdata/system/tailscale/bin/tailscale ip -4 2>/dev/null)
[ -z "$TAILSCALE_IP" ] && { log "${RED}" "No Tailscale IP"; cat /userdata/system/tailscale/tailscale_up.log /userdata/system/tailscale/boot.log; exit 1; }

# --- Verify ---
log "${BLUE}" "Verifying installation..."
show_progress 1
echo -e "${GREEN}Tailscale running at IP: $TAILSCALE_IP${NC}"
/userdata/system/tailscale/bin/tailscale status
ip a | grep tailscale0
echo -e "${YELLOW}Test SSH with key: ssh -i <path-to-private-key> root@$TAILSCALE_IP${NC}"
echo -e "${YELLOW}Note: Use 'dropbearconvert' to convert the private key to OpenSSH format${NC}"
if [ "$AUTO_CONNECT" != "true" ]; then
    while true; do read -r -p "Did SSH work with key? (yes/no): " SSH_CONFIRM; [[ "$SSH_CONFIRM" =~ ^(yes|no)$ ]] && break; echo "Please enter 'yes' or 'no'"; done
    [[ "$SSH_CONFIRM" == "no" ]] && { log "${RED}" "SSH failed—check key setup"; exit 1; }
fi

# --- Save Overlay with Countdown ---
log "${BLUE}" "Saving overlay..."
show_progress 1
batocera-save-overlay || { log "${RED}" "Overlay save failed"; exit 1; }
log "${GREEN}" "✅ Installation complete—rebooting in 5 seconds..."
for i in 5 4 3 2 1; do
    echo -e "${YELLOW}Rebooting in $i...${NC}"
    sleep 1
done
reboot