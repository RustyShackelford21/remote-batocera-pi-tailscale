#!/bin/bash
#
# Ultimate SSH Key & Tailscale Setup for Batocera
# Version: 12.5 - Fully Automated, Tailscale File Sharing, Dropbear Key, Extra Flair
#

# --- Colors ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'  # Added Magenta
NC='\033[0m'

# --- Logging Function ---
log() {
    echo -e "${1}[$(date '+%Y-%m-%d %H:%M:%S')] ${2}${NC}"
}

# --- Configuration ---
TAILSCALE_VERSION="1.80.2"
INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="$INSTALL_DIR/keys"
LOCAL_SSH_PORT="22"

# --- Functions ---
# Generates a strong, random password
generate_random_password() {
    head /dev/urandom | tr -dc 'A-Za-z0-9~!@#$%^&*()-_=+[]{};:,<.>/?' | head -c 32
}

# Displays a fancy banner
banner() {
    local text="$1"
    local width=60
    local border=$(printf "%-${width}s" '' | tr ' ' '=')
    echo -e "${BLUE}${border}${NC}"
    printf "${MAGENTA}%${width}s\n${NC}" "$text" | tr ' ' '.'
    echo -e "${BLUE}${border}${NC}"
}

# Simulates a progress indicator with a message
progress_indicator() {
    local duration=$1
    local message="$2"
    local spin=('‚†ã' '‚†ô' '‚†π' '‚†∏' '‚†º' '‚†¥' '‚†¶' '‚†ß' '‚†á' '‚†è')
    local i=0
    echo -ne "${CYAN}${message}...${NC} "

    for ((t=0; t<duration*10; t++)); do
        printf "\b${spin[i]}"
        i=$(( (i+1) % 10 ))
        sleep 0.1
    done
    echo -e "\b${GREEN}‚úì${NC}"  # Replace spinner with a checkmark
}

# --- Script Start ---
clear
banner "Batocera Tailscale & SSH Key Setup (v12.5)"
echo -e "${CYAN}This script will guide you through setting up Tailscale and SSH key-based authentication on your Batocera system.${NC}"

# --- Root Check ---
if [ "$(id -u)" -ne 0 ]; then
    log "$RED" "ERROR: This script must be run as root. Use 'sudo bash $(basename "$0")'"
    exit 1
fi

# --- Ensure TUN Device ---
log "$BLUE" "Ensuring TUN device exists..."
modprobe tun
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun

# --- User Prompts ---
echo
log "$YELLOW" "Let's get some information from you..."
read -rp "Enter your Tailscale auth key (get it from https://login.tailscale.com/admin/settings/keys): " AUTH_KEY
[[ -z "$AUTH_KEY" ]] && { log "$RED" "ERROR: Auth key is required."; exit 1; }
[[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid auth key format (must start with 'tskey-auth-')."; exit 1; }

DEFAULT_HOSTNAME=$(hostname | cut -d'.' -f1)
read -rp "Enter a hostname for this device (default: $DEFAULT_HOSTNAME): " USER_HOSTNAME
HOSTNAME="${USER_HOSTNAME:-$DEFAULT_HOSTNAME}"

DEFAULT_TAG="tag:ssh-batocera"
read -rp "Use default Tailscale tag '$DEFAULT_TAG'? (yes/no): " TAG_CONFIRM
if [[ "$TAG_CONFIRM" =~ ^[Nn]o ]]; then
    read -rp "Enter your custom Tailscale tag: " TAG
    [[ -z "$TAG" ]] && { log "$RED" "ERROR: Tag is required if not using the default."; exit 1; }
else
    TAG="$DEFAULT_TAG"
fi

log "$GREEN" "‚úÖ Using hostname: $HOSTNAME"
log "$GREEN" "‚úÖ Using Tailscale tag: $TAG"

# --- Detect Local IP ---
LOCAL_IP=$(hostname -I | awk '{print $1}')
[[ -z "$LOCAL_IP" ]] && { log "$RED" "Could not determine local IP. You'll need to enter it manually later."; LOCAL_IP="<LOCAL_IP>"; } || log "$BLUE" "Detected local IP: $LOCAL_IP"

# --- Setup Directories ---
mkdir -p "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
chmod 700 "$SSH_DIR" "$KEYS_DIR" /etc/dropbear

# --- Generate or Reuse SSH Key ---
DROPBEAR_KEY="$SSH_DIR/id_dropbear"
OPENSSH_KEY="$KEYS_DIR/id_ed25519_batocera"

if [ ! -f "$DROPBEAR_KEY" ]; then
    log "$GREEN" "üîë Generating new SSH key..."
    dropbearkey -t ed25519 -f "$DROPBEAR_KEY" || { log "$RED" "Key generation failed"; exit 1; }
    chmod 600 "$DROPBEAR_KEY"
    dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { log "$RED" "Failed to extract public key"; exit 1; }
    chmod 600 /etc/dropbear/authorized_keys
else
    log "$YELLOW" "‚ö†Ô∏è SSH key already exists. Reusing existing key."
    dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { log "$RED" "Failed to extract public key"; exit 1;}
    chmod 600 /etc/dropbear/authorized_keys
fi

# --- Convert Key for OpenSSH Users ---
dropbearconvert dropbear openssh "$DROPBEAR_KEY" "$OPENSSH_KEY" || { log "$RED" "Key conversion failed"; exit 1; }
chmod 600 "$OPENSSH_KEY"

# --- Configure Dropbear ---
log "$BLUE" "Configuring Dropbear..."
DROPBEAR_CONF="/etc/dropbear/dropbear.conf"
touch "$DROPBEAR_CONF"
[[ ! -w "$DROPBEAR_CONF" ]] && { log "$RED" "ERROR: Cannot write to $DROPBEAR_CONF"; exit 1; }
sed -i '/^PasswordAuth/d' "$DROPBEAR_CONF" 2>/dev/null || true
echo "PasswordAuth no" >> "$DROPBEAR_CONF"

# --- Save Overlay ---
log "$BLUE" "Saving overlay to persist SSH config..."
batocera-save-overlay > /dev/null 2>&1 && log "$GREEN" "‚úÖ Overlay saved." || { log "$RED" "Overlay save failed"; exit 1; }

# --- Start Temporary Dropbear Instance (Port 2222) ---
log "$BLUE" "Starting temporary Dropbear instance on port 2222 (key-only)..."
/usr/sbin/dropbear -s -p 2222 -B &

log "$GREEN" "‚úÖ Setup Complete!"
log "$CYAN" "To retrieve your SSH key, use:"
echo -e "${YELLOW}scp root@$LOCAL_IP:$OPENSSH_KEY ~/.ssh/id_ed25519_batocera${NC}"
log "$CYAN" "Then test SSH with:"
echo -e "${YELLOW}ssh -i ~/.ssh/id_ed25519_batocera root@$LOCAL_IP -p 2222${NC}"
