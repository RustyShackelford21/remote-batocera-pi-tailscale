#!/bin/bash
#
# Ultimate SSH Key & Tailscale Setup for Batocera
# Version: 3.2 - Fixed IP Detection, TUN Setup, Simplified Flow
#

# --- Colors ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# --- Logging Function ---
log() {
    local color=$1
    local message=$2
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] $message${NC}"
}

# --- Configuration ---
TAILSCALE_VERSION="1.80.2"
INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="/userdata/system/tailscale/keys"
CUSTOM_SH="/userdata/system/custom.sh"

# --- Script Start ---
clear
echo -e "${YELLOW}Tailscale & SSH Key Setup for Batocera${NC}"

# --- Root Check ---
[ "$(id -u)" -ne 0 ] && { log "$RED" "Must be run as root."; exit 1; }

# --- Command Line Arguments ---
DISABLE_PASSWORD_AUTH=false
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --disable-password-auth) DISABLE_PASSWORD_AUTH=true; shift ;;
        *) log "$RED" "Unknown option: $1"; exit 1 ;;
    esac
done

# --- Get Tailscale Auth Key ---
if [ "$DISABLE_PASSWORD_AUTH" = false ]; then
    read -rp "Enter your Tailscale auth key: " AUTH_KEY
    [[ -z "$AUTH_KEY" ]] && { log "$RED" "ERROR: Auth key is required."; exit 1; }
    [[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid auth key format."; exit 1; }
fi

# --- Prompt for Hostname and Tag (only on first run) ---
if [ "$DISABLE_PASSWORD_AUTH" = false ]; then
    read -rp "Enter a hostname for this device (default: batocera-pi5): " USER_HOSTNAME
    HOSTNAME="${USER_HOSTNAME:-batocera-pi5}"
    DEFAULT_TAG="tag:ssh-batocera-1"
    read -rp "Use default tag '$DEFAULT_TAG'? (yes/no): " TAG_CONFIRM
    if [[ "$TAG_CONFIRM" =~ ^[Nn]o$ ]]; then
        read -rp "Enter your custom Tailscale tag: " USER_TAG
        TAG="${USER_TAG:-$DEFAULT_TAG}"
    else
        TAG="$DEFAULT_TAG"
    fi
    log "$GREEN" "‚úÖ Using hostname: $HOSTNAME"
    log "$GREEN" "‚úÖ Using Tailscale tag: $TAG"
fi

# --- Detect Local IP Address (LAN) ---
LOCAL_IP=$(ip addr show | grep -oE 'inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | awk '{print $2}' | grep -v '127.0.0.1' | head -n 1)
if [[ -z "$LOCAL_IP" ]]; then
    log "$YELLOW" "‚ö†Ô∏è Could not determine local IP. Using placeholder in SCP instructions."
    LOCAL_IP="<LOCAL_IP>"
else
    log "$BLUE" "Detected local IP: $LOCAL_IP"
fi

# --- Setup Directories ---
mkdir -p "$SSH_DIR" "$KEYS_DIR" "$INSTALL_DIR/bin"
chmod 700 "$SSH_DIR" "$KEYS_DIR"

# --- Generate SSH Key if Not Exists (only on first run) ---
DROPBEAR_KEY="$SSH_DIR/id_dropbear"
OPENSSH_KEY="$KEYS_DIR/id_ed25519"
AUTH_KEYS_FILE="$SSH_DIR/authorized_keys"
if [ "$DISABLE_PASSWORD_AUTH" = false ] && [ ! -f "$DROPBEAR_KEY" ]; then
    log "$GREEN" "üîë Generating SSH key..."
    dropbearkey -t ed25519 -f "$DROPBEAR_KEY" > "$SSH_DIR/keyinfo" 2>/dev/null
    grep "ssh-ed25519" "$SSH_DIR/keyinfo" > "$AUTH_KEYS_FILE"
    chmod 600 "$DROPBEAR_KEY" "$AUTH_KEYS_FILE"
    rm "$SSH_DIR/keyinfo"
    dropbearconvert dropbear openssh "$DROPBEAR_KEY" "$OPENSSH_KEY" 2>/dev/null
    chmod 600 "$OPENSSH_KEY"
    log "$GREEN" "‚úÖ SSH key generated and converted to OpenSSH format."
else
    log "$BLUE" "SSH key already exists or in disable mode. Skipping generation."
fi

# --- Configure TUN Device for Tailscale ---
log "$BLUE" "Configuring TUN device..."
modprobe tun || { log "$RED" "Failed to load TUN module."; exit 1; }
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 666 /dev/net/tun
[ -c /dev/net/tun ] || { log "$RED" "/dev/net/tun still not available."; exit 1; }

# --- Install & Configure Tailscale (only on first run) ---
if [ "$DISABLE_PASSWORD_AUTH" = false ]; then
    log "$BLUE" "Installing Tailscale..."
    wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "$RED" "Tailscale download failed."; exit 1; }
    tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 || { log "$RED" "Tailscale extraction failed."; exit 1; }
    rm "$INSTALL_DIR/tailscale.tgz"
    chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled"

    "$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" &>/dev/null &
    sleep 3
    pgrep -f tailscaled || { log "$RED" "tailscaled failed to start."; exit 1; }
    "$INSTALL_DIR/bin/tailscale" up --authkey="$AUTH_KEY" --hostname="$HOSTNAME" --advertise-tags="$TAG" --ssh || { log "$RED" "Tailscale setup failed."; exit 1; }
    TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" ip -4 2>/dev/null)
    if [[ -z "$TAILSCALE_IP" ]]; then
        log "$YELLOW" "‚ö†Ô∏è Tailscale IP not yet available. Using local IP for SCP."
        SCP_TARGET="$LOCAL_IP"
    else
        log "$GREEN" "‚úÖ Tailscale running at IP: $TAILSCALE_IP"
        SCP_TARGET="$TAILSCALE_IP"
    fi
fi

# --- Configure Persistence via custom.sh ---
if [ ! -f "$CUSTOM_SH" ]; then
    echo "#!/bin/sh" > "$CUSTOM_SH"
    chmod +x "$CUSTOM_SH"
fi
if [ "$DISABLE_PASSWORD_AUTH" = true ]; then
    log "$BLUE" "Disabling password authentication in custom.sh..."
    cat > "$CUSTOM_SH" << EOF
#!/bin/sh
modprobe tun
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 666 /dev/net/tun
pkill dropbear
dropbear -k $AUTH_KEYS_FILE -s &>/dev/null &
sleep 1
pgrep dropbear || echo "Dropbear failed" >> /userdata/system/tailscale_setup.log
$INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock &>/dev/null &
sleep 3
pgrep -f tailscaled || echo "Tailscaled failed" >> /userdata/system/tailscale_setup.log
EOF
else
    log "$BLUE" "Setting up initial persistence with password auth enabled..."
    cat > "$CUSTOM_SH" << EOF
#!/bin/sh
modprobe tun
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 666 /dev/net/tun
pkill dropbear
dropbear -k $AUTH_KEYS_FILE &>/dev/null &
sleep 1
pgrep dropbear || echo "Dropbear failed" >> /userdata/system/tailscale_setup.log
$INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock &>/dev/null &
sleep 3
pgrep -f tailscaled || echo "Tailscaled failed" >> /userdata/system/tailscale_setup.log
EOF
fi

# --- Provide SCP Instructions (only on first run) ---
if [ "$DISABLE_PASSWORD_AUTH" = false ]; then
    log "$CYAN" "1Ô∏è‚É£ On your Windows PC (PowerShell), run this to retrieve your key:"
    echo -e "${YELLOW}scp root@$SCP_TARGET:/userdata/system/tailscale/keys/id_ed25519 \$HOME\\.ssh\\id_ed25519${NC}"
    log "$CYAN" "2Ô∏è‚É£ On WSL or Linux, use this instead:"
    echo -e "${YELLOW}scp root@$SCP_TARGET:/userdata/system/tailscale/keys/id_ed25519 ~/.ssh/id_ed25519${NC}"
    log "$CYAN" "3Ô∏è‚É£ Set correct permissions locally:"
    echo -e "${YELLOW}chmod 600 ~/.ssh/id_ed25519${NC}"
    log "$CYAN" "4Ô∏è‚É£ Test SSH with:"
    echo -e "${YELLOW}ssh -i ~/.ssh/id_ed25519 root@$SCP_TARGET${NC}"
    log "$YELLOW" "‚ö†Ô∏è After verifying key login works, run this script again with: ${GREEN}bash $0 --disable-password-auth${NC}"
else
    log "$GREEN" "‚úÖ Password authentication disabled. Rebooting in 5 seconds..."
    sleep 5
    reboot
fi

# --- Final Message ---
log "$GREEN" "‚úÖ Setup complete! Follow instructions above to secure your system."
