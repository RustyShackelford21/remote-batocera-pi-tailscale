#!/bin/bash
#
# Ultimate SSH Key & Tailscale Setup for Batocera
# Version: 3.0 - Best of Both Worlds
#

# --- Colors ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# --- Logging Function ---
log() {
    local color=$1
    local message=$2
    echo -e "${color}[$(date '+%Y-%m-%d %H:%M:%S')] $message${NC}"
}

# --- Configuration ---
TAILSCALE_VERSION="1.80.2"
DEFAULT_HOSTNAME="batocera-pi5"
DEFAULT_TAG="tag:ssh-batocera"
INSTALL_DIR="/userdata/system/tailscale"

# --- Functions ---
generate_random_password() {
  head /dev/urandom | tr -dc A-Za-z0-9\~\!\@\#\$\%\^\&\*\(\)-_\=\+\[\]\{\}\;\:\'\"\,\<\.\>\/\? | head -c 32
}

# --- Script Start ---
clear
echo -e "${YELLOW}Tailscale & SSH Key Setup for Batocera${NC}"

# --- Root Check ---
[ "$(id -u)" -ne 0 ] && { log "$RED" "Must be run as root."; exit 1; }

# --- Parse Arguments ---
AUTH_KEY=""
HOSTNAME="$DEFAULT_HOSTNAME"
TAG="$DEFAULT_TAG"
ADVERTISE_ROUTES=""

while [[ "$#" -gt 0 ]]; do
  case $1 in
    --authkey=*) AUTH_KEY="${1#*=}"; shift ;;
    --hostname=*) HOSTNAME="${1#*=}"; shift ;;
    --advertise-routes=*) ADVERTISE_ROUTES="${1#*=}"; shift ;;
    --tag=*) TAG="${1#*=}"; shift ;;
    --help)
      echo "Usage: $0 [--authkey=<key>] [--hostname=<name>] [--advertise-routes=<subnet>] [--tag=<tag>]"
      exit 0
      ;;
    *) log "$RED" "Unknown option: $1"; exit 1 ;;
  esac
done

# --- Input Validation ---
[[ -z "$AUTH_KEY" ]] && { log "$RED" "ERROR: --authkey is required."; exit 1; }
[[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid auth key format."; exit 1; }

# --- Detect Local IP Address (LAN) ---
LOCAL_IP=$(hostname -I | awk '{print $1}')
if [[ -z "$LOCAL_IP" ]]; then
    log "$RED" "Could not determine local IP. You will need to replace <LOCAL_IP> manually in SCP instructions."
    LOCAL_IP="<LOCAL_IP>"  # Placeholder
else
    log "$BLUE" "Detected local IP: $LOCAL_IP"
fi

# --- Setup Directories ---
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="/userdata/system/tailscale/keys"
mkdir -p "$SSH_DIR" "$KEYS_DIR"
chmod 700 "$SSH_DIR" "$KEYS_DIR"

# --- Generate SSH Key if Not Exists ---
DROPBEAR_KEY="$SSH_DIR/id_dropbear"
OPENSSH_KEY="$KEYS_DIR/id_ed25519"
AUTH_KEYS_FILE="$SSH_DIR/authorized_keys"

if [ ! -f "$DROPBEAR_KEY" ]; then
    log "$GREEN" "🔑 Generating SSH key..."
    dropbearkey -t ed25519 -f "$DROPBEAR_KEY" > "$SSH_DIR/keyinfo"
    grep "ssh-ed25519" "$SSH_DIR/keyinfo" > "$AUTH_KEYS_FILE"
    chmod 600 "$AUTH_KEYS_FILE"
    rm "$SSH_DIR/keyinfo"
else
    log "$BLUE" "SSH key already exists. Skipping generation."
fi

# --- Convert Key for OpenSSH Users ---
dropbearconvert dropbear openssh "$DROPBEAR_KEY" "$OPENSSH_KEY"
chmod 600 "$OPENSSH_KEY"

# --- Install & Configure Tailscale ---
mkdir -p "$INSTALL_DIR/bin"
wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "$RED" "Tailscale download failed."; exit 1; }
tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 || { log "$RED" "Tailscale extraction failed."; exit 1; }
rm "$INSTALL_DIR/tailscale.tgz"
chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled"

"$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" &
sleep 3

"$INSTALL_DIR/bin/tailscale" up --authkey="$AUTH_KEY" --hostname="$HOSTNAME" --advertise-tags="$TAG" --ssh || { log "$RED" "Tailscale setup failed."; exit 1; }

TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" ip -4 2>/dev/null)

if [[ -z "$TAILSCALE_IP" ]]; then
    log "$YELLOW" "⚠️ Tailscale is not running yet. Using local IP for SCP retrieval."
    SCP_TARGET="$LOCAL_IP"
else
    log "$GREEN" "✅ Tailscale is running! IP: $TAILSCALE_IP"
    SCP_TARGET="$TAILSCALE_IP"
fi

# --- Provide SCP Instructions ---
log "$CYAN" "1️⃣ On your Windows PC (PowerShell), run the following command to retrieve your key:"
echo -e "${YELLOW}scp root@$SCP_TARGET:/userdata/system/tailscale/keys/id_ed25519 $HOME\\.ssh\\id_ed25519${NC}"

log "$CYAN" "2️⃣ On WSL or Linux, use this command instead:"
echo -e "${YELLOW}scp root@$SCP_TARGET:/userdata/system/tailscale/keys/id_ed25519 ~/.ssh/id_ed25519${NC}"

log "$CYAN" "3️⃣ Then, run the following to set correct permissions:"
echo -e "${YELLOW}chmod 600 ~/.ssh/id_ed25519${NC}"

# --- Secure System AFTER Key Transfer ---
log "$YELLOW" "⚠️ Once you've verified SSH key login works, you can disable password access."
log "$CYAN" "Run this command to disable password SSH permanently:"
echo -e "${YELLOW}sed -i '/PasswordAuth/d' /etc/dropbear/dropbear.conf && echo 'PasswordAuth no' >> /etc/dropbear/dropbear.conf && pkill dropbear && dropbear -B${NC}"

log "$GREEN" "✅ SSH Key & Tailscale Setup Complete!"
log "$CYAN" "Now you can SSH using:"
echo -e "${YELLOW}ssh -i ~/.ssh/id_ed25519 root@$SCP_TARGET${NC}"
