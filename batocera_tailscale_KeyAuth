#!/bin/bash
#
# Ultimate SSH Key & Tailscale Setup for Batocera
# Version: 10.2 - Safe Manual Testing, No Lockouts, Full Persistence
#

# --- Colors ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# --- Logging Function ---
log() {
    echo -e "${1}[$(date '+%Y-%m-%d %H:%M:%S')] ${2}${NC}"
}

# --- Configuration ---
TAILSCALE_VERSION="1.80.2"
INSTALL_DIR="/userdata/system/tailscale"
SSH_DIR="/userdata/system/.ssh"
KEYS_DIR="$INSTALL_DIR/keys"

# --- Functions ---
generate_random_password() {
    head /dev/urandom | tr -dc A-Za-z0-9\~\!\@\#\$\%\^\&\*\(\)-_\=\+\[\]\{\}\;\:\'\"\,\<\.\>\/\? | head -c 32
}

# --- Script Start ---
clear
echo -e "${YELLOW}Tailscale & SSH Key Setup for Batocera${NC}"

# --- Root Check ---
[ "$(id -u)" -ne 0 ] && { log "$RED" "Must be run as root."; exit 1; }

# --- Ensure TUN Device ---
log "$BLUE" "Ensuring TUN device exists..."
modprobe tun
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun

# --- User Prompts ---
read -rp "Enter your Tailscale auth key: " AUTH_KEY
[[ -z "$AUTH_KEY" ]] && { log "$RED" "ERROR: Auth key required."; exit 1; }
[[ ! "$AUTH_KEY" =~ ^tskey-auth- ]] && { log "$RED" "ERROR: Invalid auth key format."; exit 1; }

read -rp "Enter a hostname (default: batocera-pi5): " USER_HOSTNAME
HOSTNAME="${USER_HOSTNAME:-batocera-pi5}"

read -rp "Enter your Tailscale tag (e.g., tag:ssh-batocera-1): " TAG
[[ -z "$TAG" ]] && { log "$RED" "ERROR: Tag required."; exit 1; }

log "$GREEN" "‚úÖ Using hostname: $HOSTNAME"
log "$GREEN" "‚úÖ Using Tailscale tag: $TAG"

# --- Detect Local IP ---
LOCAL_IP=$(ip -4 addr show | grep -oE "inet [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | awk '{print $2}' | grep -v "127.0.0.1" | head -n 1)
[[ -z "$LOCAL_IP" ]] && { log "$RED" "Could not determine local IP."; LOCAL_IP="<LOCAL_IP>"; } || log "$BLUE" "Detected local IP: $LOCAL_IP"

# --- Setup Directories ---
mkdir -p "$SSH_DIR" "$KEYS_DIR" /etc/dropbear
chmod 700 "$SSH_DIR" "$KEYS_DIR" /etc/dropbear

# --- Generate SSH Key if Not Exists ---
DROPBEAR_KEY="$SSH_DIR/id_dropbear"
OPENSSH_KEY="$KEYS_DIR/id_ed25519_batocera"

if [ ! -f "$DROPBEAR_KEY" ]; then
    log "$GREEN" "üîë Generating new SSH key..."
    dropbearkey -t ed25519 -f "$DROPBEAR_KEY" || { log "$RED" "Key generation failed"; exit 1; }
    chmod 600 "$DROPBEAR_KEY"
    dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { log "$RED" "Failed to extract public key"; exit 1; }
    chmod 600 /etc/dropbear/authorized_keys
else
    log "$YELLOW" "‚ö†Ô∏è SSH key already exists. Reusing existing key."
    dropbearkey -y -f "$DROPBEAR_KEY" | grep "^ssh-ed25519" > /etc/dropbear/authorized_keys || { log "$RED" "Failed to extract public key"; exit 1; }
    chmod 600 /etc/dropbear/authorized_keys
fi

# --- Convert Key for OpenSSH Users ---
dropbearconvert dropbear openssh "$SSH_DIR/id_dropbear" "$OPENSSH_KEY" || { log "$RED" "Key conversion failed"; exit 1; }
chmod 600 "$OPENSSH_KEY"

# --- Save Overlay Early ---
log "$BLUE" "Saving overlay to persist SSH config..."
batocera-save-overlay || { log "$RED" "Overlay save failed"; exit 1; }

# --- Install Tailscale ---
mkdir -p "$INSTALL_DIR/bin"
wget -q -O "$INSTALL_DIR/tailscale.tgz" "https://pkgs.tailscale.com/stable/tailscale_${TAILSCALE_VERSION}_arm64.tgz" || { log "$RED" "Tailscale download failed."; exit 1; }
tar -xzf "$INSTALL_DIR/tailscale.tgz" -C "$INSTALL_DIR/bin" --strip-components=1 || { log "$RED" "Tailscale extraction failed."; exit 1; }
rm "$INSTALL_DIR/tailscale.tgz"
chmod +x "$INSTALL_DIR/bin/tailscale" "$INSTALL_DIR/bin/tailscaled"

# --- Start Tailscale ---
log "$BLUE" "Starting Tailscale daemon..."
pkill -f "tailscaled" || true
"$INSTALL_DIR/bin/tailscaled" --state="$INSTALL_DIR/tailscaled.state" --socket="$INSTALL_DIR/tailscaled.sock" &
sleep 10
"$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" up --authkey="$AUTH_KEY" --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes || { log "$RED" "Tailscale up failed"; exit 1; }
sleep 10

# --- Wait for Tailscale IP Assignment ---
log "$BLUE" "Waiting for Tailscale IP assignment..."
TRIES=0
TAILSCALE_IP=""
while [[ -z "$TAILSCALE_IP" && $TRIES -lt 10 ]]; do
    sleep 3
    TAILSCALE_IP=$("$INSTALL_DIR/bin/tailscale" --socket="$INSTALL_DIR/tailscaled.sock" ip -4 2>/dev/null)
    ((TRIES++))
done
[[ -z "$TAILSCALE_IP" ]] && { log "$YELLOW" "‚ö†Ô∏è Tailscale IP not assigned after 30s. Using Local IP."; TAILSCALE_IP="$LOCAL_IP"; } || log "$GREEN" "‚úÖ Tailscale IP: $TAILSCALE_IP"

# --- Configure Persistence ---
log "$BLUE" "Setting up persistence with fallback..."
cat > /userdata/system/custom.sh <<EOF
#!/bin/sh
mkdir -p /dev/net
[ ! -c /dev/net/tun ] && mknod /dev/net/tun c 10 200 && chmod 600 /dev/net/tun
pkill -f dropbear || true
sleep 1
if [ -s "/etc/dropbear/authorized_keys" ]; then
    /usr/sbin/dropbear -s -p 22 || /usr/sbin/dropbear -p 22
else
    /usr/sbin/dropbear -p 22
fi
sleep 1
if ! pgrep -f "$INSTALL_DIR/bin/tailscaled" > /dev/null; then
    $INSTALL_DIR/bin/tailscaled --state=$INSTALL_DIR/tailscaled.state --socket=$INSTALL_DIR/tailscaled.sock &
    sleep 10
    if [ -s "$INSTALL_DIR/tailscaled.state" ]; then
        $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes
    else
        $INSTALL_DIR/bin/tailscale --socket=$INSTALL_DIR/tailscaled.sock up --authkey="$AUTH_KEY" --hostname="$HOSTNAME" --advertise-tags="$TAG" --accept-routes
    fi
fi
EOF
chmod +x /userdata/system/custom.sh

# --- Restart Dropbear Safely ---
log "$BLUE" "Starting Dropbear with key auth on port 22..."
pkill -f dropbear || true
sleep 1
/usr/sbin/dropbear -s -p 22 || { log "$RED" "Dropbear start failed! Falling back..."; /usr/sbin/dropbear -p 22 || exit 1; }

# --- Instructions and Manual Testing ---
log "$GREEN" "‚úÖ Setup Complete (Phase 1)!"
log "$YELLOW" "‚ö†Ô∏è IMPORTANT: You MUST test SSH key authentication BEFORE proceeding."
log "$CYAN" "Retrieve your SSH key:"
echo -e "${YELLOW}scp root@$LOCAL_IP:/userdata/system/tailscale/keys/id_ed25519_batocera %USERPROFILE%\\.ssh\\id_ed25519_batocera${NC}"
log "$CYAN" "Set permissions:"
echo -e "${YELLOW}chmod 600 %USERPROFILE%\\.ssh\\id_ed25519_batocera${NC}"
log "$CYAN" "Test SSH (in a SEPARATE terminal):"
echo -e "${YELLOW}ssh -i %USERPROFILE%\\.ssh\\id_ed25519_batocera root@$LOCAL_IP${NC}"
echo -e "${YELLOW}ssh -i %USERPROFILE%\\.ssh\\id_ed25519_batocera root@$TAILSCALE_IP${NC}"
log "$YELLOW" "If the SSH connection using the key works, type 'yes' below to continue."
log "$YELLOW" "If it DOES NOT work, type 'no'. You can then troubleshoot and re-run this script."

read -rp "Did SSH key authentication work? (yes/no): " KEY_WORKS

if [[ "$KEY_WORKS" =~ ^[Yy]es$ ]]; then
    log "$GREEN" "‚úÖ SSH key authentication confirmed!"
    # --- Configure Dropbear (dropbear.conf) - Disable Password Auth ---
    log "$BLUE" "Configuring Dropbear to disable password auth..."
    DROPBEAR_CONF="/etc/dropbear/dropbear.conf"
    touch "$DROPBEAR_CONF"
    [[ ! -w "$DROPBEAR_CONF" ]] && { log "$RED" "ERROR: Cannot write to $DROPBEAR_CONF"; exit 1; }
    sed -i '/^PasswordAuth/d' "$DROPBEAR_CONF" 2>/dev/null || true
    echo "PasswordAuth no" >> "$DROPBEAR_CONF"
    # --- Reset Root Password ---
    NEW_PASSWORD=$(generate_random_password)
    echo "root:$NEW_PASSWORD" | chpasswd
    log "$RED" "IMPORTANT: The root password has been reset to a random value."
    log "$RED" "You will ONLY be able to log in using your SSH key."
else
    log "$RED" "‚ùå SSH key authentication NOT confirmed. Password authentication will remain enabled."
    log "$RED" "   Troubleshoot the key setup (check permissions, authorized_keys, etc.)."
fi

batocera-save-overlay
log "$GREEN" "‚úÖ Final Setup Complete!"
